(function (e) { e.extend(e.mobile.datebox.prototype.options, { themeDateToday: "a", themeDayHigh: "e", themeDatePick: "a", themeDateHigh: "e", themeDateHighAlt: "e", themeDateHighRec: "e", themeDate: "d", calHighToday: true, calHighPick: true, calShowDays: true, calOnlyMonth: false, calWeekMode: false, calWeekModeDay: 1, calWeekHigh: false, calControlGroup: false, calShowWeek: false, calUsePickers: false, calNoHeader: false, useTodayButton: false, useCollapsedBut: false, highDays: false, highDates: false, highDatesRec: false, highDatesAlt: false, enableDates: false, calDateList: false, calShowDateList: false }); e.extend(e.mobile.datebox.prototype, { _cal_gen: function (e, t, n, r, i) { var s = 0, o = 0, u = 1, a = 1, f = [], l = [], c = false; for (s = 0; s <= 5; s++) { if (c === false) { l = []; for (o = 0; o <= 6; o++) { if (s === 0 && o < e) { if (r === true) { l.push([t + (o - e) + 1, i - 1]) } else { l.push(false) } } else { if (s > 3 && u > n) { if (r === true) { l.push([a, i + 1]); a++ } else { l.push(false) } c = true } else { l.push([u, i]); u++; if (u > n) { c = true } } } } f.push(l) } } return f }, _cal_check: function (t, n, r, i) { var s = this, o, u = this.options, f = {}, l = (new this._date(n, r, i, 0, 0, 0, 0)).getDay(); f.ok = true; f.iso = n + "-" + s._zPad(r + 1) + "-" + s._zPad(i); f.comp = parseInt(f.iso.replace(/-/g, ""), 10); f.theme = u.themeDate; f.recok = true; f.rectheme = false; if (u.blackDatesRec !== false) { for (o = 0; o < u.blackDatesRec.length; o++) { if ((u.blackDatesRec[o][0] === -1 || u.blackDatesRec[o][0] === n) && (u.blackDatesRec[o][1] === -1 || u.blackDatesRec[o][1] === r) && (u.blackDatesRec[o][2] === -1 || u.blackDatesRec[o][2] === i)) { f.recok = false } } } if (e.isArray(u.enableDates) && e.inArray(f.iso, u.enableDates) < 0) { f.ok = false } else { if (t.checkDates) { if (f.recok !== true || u.afterToday === true && t.thisDate.comp() > f.comp || u.beforeToday === true && t.thisDate.comp() < f.comp || u.notToday === true && t.thisDate.comp() === f.comp || u.maxDays !== false && t.maxDate.comp() < f.comp || u.minDays !== false && t.minDate.comp() > f.comp || e.isArray(u.blackDays) && e.inArray(l, u.blackDays) > -1 || e.isArray(u.blackDates) && e.inArray(f.iso, u.blackDates) > -1) { f.ok = false } } } if (f.ok) { if (u.highDatesRec !== false) { for (o = 0; o < u.highDatesRec.length; o++) { if ((u.highDatesRec[o][0] === -1 || u.highDatesRec[o][0] === n) && (u.highDatesRec[o][1] === -1 || u.highDatesRec[o][1] === r) && (u.highDatesRec[o][2] === -1 || u.highDatesRec[o][2] === i)) { f.rectheme = true } } } if (u.calHighPick && i === t.presetDay && s.d.input.val() !== "" | u.defaultValue !== false) { f.theme = u.themeDatePick } else { if (u.calHighToday && f.comp === t.thisDate.comp()) { f.theme = u.themeDateToday } else { if (e.isArray(u.highDatesAlt) && e.inArray(f.iso, u.highDatesAlt) > -1) { f.theme = u.themeDateHighAlt } else { if (e.isArray(u.highDates) && e.inArray(f.iso, u.highDates) > -1) { f.theme = u.themeDateHigh } else { if (e.isArray(u.highDays) && e.inArray(l, u.highDays) > -1) { f.theme = u.themeDayHigh } else { if (e.isArray(u.highDatesRec) && f.rectheme === true) { f.theme = u.themeDateHighRec } } } } } } } return f } }); e.extend(e.mobile.datebox.prototype._build, { calbox: function () { var t = this, n = this.options, r, i = false, s = "ui-datebox-", o = false, u = false, f = false, l = false, c = false; if (typeof t.d.intHTML !== "boolean") { t.d.intHTML.remove() } t.d.headerText = t._grabLabel() !== false ? t._grabLabel() : t.__("titleDateDialogLabel"); t.d.intHTML = e("<span>"); e('<div class="' + s + 'gridheader"><div class="' + s + 'gridlabel"><h4>' + t.__("monthsOfYear")[t.theDate.getMonth()] + " " + t.theDate.getFullYear() + "</h4></div></div>").appendTo(t.d.intHTML); e("<div class='" + s + "gridplus" + (t.__("isRTL") ? "-rtl" : "") + "'><a href='#'>" + t.__("nextMonth") + "</a></div>").prependTo(t.d.intHTML.find("." + s + "gridheader")).buttonMarkup({ theme: n.themeDate, icon: "arrow-r", inline: true, iconpos: "notext", corners: true, shadow: true }).on(n.clickEventAlt, function (e) { e.preventDefault(); if (t.calNext) { if (t.theDate.getDate() > 28) { t.theDate.setDate(1) } t._offset("m", 1) } }); e("<div class='" + s + "gridminus" + (t.__("isRTL") ? "-rtl" : "") + "'><a href='#'>" + t.__("prevMonth") + "</a></div>").prependTo(t.d.intHTML.find("." + s + "gridheader")).buttonMarkup({ theme: n.themeDate, icon: "arrow-l", inline: true, iconpos: "notext", corners: true, shadow: true }).on(n.clickEventAlt, function (e) { e.preventDefault(); if (t.calPrev) { if (t.theDate.getDate() > 28) { t.theDate.setDate(1) } t._offset("m", -1) } }); if (n.calNoHeader === true) { t.d.intHTML.find("." + s + "gridheader").remove() } i = { today: -1, highlightDay: -1, presetDay: -1, startDay: t.__("calStartDay"), thisDate: new t._date, maxDate: t.initDate.copy(), minDate: t.initDate.copy(), currentMonth: false, weekMode: 0, weekDays: null }; i.start = (t.theDate.copy([0], [0, 0, 1]).getDay() - t.__("calStartDay") + 7) % 7; i.thisMonth = t.theDate.getMonth(); i.thisYear = t.theDate.getFullYear(); i.wk = t.theDate.copy([0], [0, 0, 1]).adj(2, -1 * i.start + (t.__("calStartDay") === 0 ? 1 : 0)).getWeek(4); i.end = 32 - t.theDate.copy([0], [0, 0, 32, 13]).getDate(); i.lastend = 32 - t.theDate.copy([0, -1], [0, 0, 32, 13]).getDate(); i.presetDate = t.d.input.val() === "" ? t._startOffset(t._makeDate(t.d.input.val())) : t._makeDate(t.d.input.val()); i.thisDateArr = i.thisDate.getArray(); i.theDateArr = t.theDate.getArray(); i.checkDates = e.inArray(false, [n.afterToday, n.beforeToday, n.notToday, n.maxDays, n.minDays, n.blackDates, n.blackDays]) > -1; t.calNext = true; t.calPrev = true; if (i.thisDateArr[0] === i.theDateArr[0] && i.thisDateArr[1] === i.theDateArr[1]) { i.currentMonth = true } if (i.presetDate.comp() === t.theDate.comp()) { i.presetDay = i.presetDate.getDate() } if (n.afterToday === true && (i.currentMonth === true || i.thisDateArr[1] >= i.theDateArr[1] && i.theDateArr[0] === i.thisDateArr[0])) { t.calPrev = false } if (n.beforeToday === true && (i.currentMonth === true || i.thisDateArr[1] <= i.theDateArr[1] && i.theDateArr[0] === i.thisDateArr[0])) { t.calNext = false } if (n.minDays !== false) { i.minDate.adj(2, -1 * n.minDays); if (i.theDateArr[0] === i.minDate.getFullYear() && i.theDateArr[1] <= i.minDate.getMonth()) { t.calPrev = false } } if (n.maxDays !== false) { i.maxDate.adj(2, n.maxDays); if (i.theDateArr[0] === i.maxDate.getFullYear() && i.theDateArr[1] >= i.maxDate.getMonth()) { t.calNext = false } } if (n.calUsePickers === true) { i.picker = e("<div>", { "class": "ui-grid-a ui-datebox-grid", style: "padding-top: 5px; padding-bottom: 5px;" }); i.picker1 = e('<div class="ui-block-a"><select name="pickmon"></select></div>').appendTo(i.picker).find("select"); i.picker2 = e('<div class="ui-block-b"><select name="pickyar"></select></div>').appendTo(i.picker).find("select"); for (r = 0; r <= 11; r++) { i.picker1.append(e('<option value="' + r + '"' + (i.thisMonth === r ? ' selected="selected"' : "") + ">" + t.__("monthsOfYear")[r] + "</option>")) } for (r = i.thisYear - 6; r <= i.thisYear + 6; r++) { i.picker2.append(e('<option value="' + r + '"' + (i.thisYear === r ? ' selected="selected"' : "") + ">" + r + "</option>")) } i.picker1.on("change", function () { t.theDate.setMonth(e(this).val()); t.refresh() }); i.picker2.on("change", function () { t.theDate.setFullYear(e(this).val()); t.refresh() }); i.picker.find("select").selectmenu({ mini: true, nativeMenu: true }); i.picker.appendTo(t.d.intHTML) } o = e('<div class="' + s + 'grid">').appendTo(t.d.intHTML); if (n.calShowDays) { t._cal_days = t.__("daysOfWeekShort").concat(t.__("daysOfWeekShort")); i.weekDays = e("<div>", { "class": s + "gridrow" }).appendTo(o); if (t.__("isRTL") === true) { i.weekDays.css("direction", "rtl") } if (n.calShowWeek) { e("<div>").addClass(s + "griddate " + s + "griddate-empty " + s + "griddate-label").appendTo(i.weekDays) } for (r = 0; r <= 6; r++) { e("<div>" + t._cal_days[(r + i.startDay) % 7] + "</div>").addClass(s + "griddate " + s + "griddate-empty " + s + "griddate-label").appendTo(i.weekDays) } } i.gen = t._cal_gen(i.start, i.lastend, i.end, !n.calOnlyMonth, t.theDate.getMonth()); for (var u = 0, h = i.gen.length; u < h; u++) { l = e("<div>", { "class": s + "gridrow" }); if (t.__("isRTL")) { l.css("direction", "rtl") } if (n.calShowWeek) { e("<div>", { "class": s + "griddate " + s + "griddate-empty" }).text("W" + i.wk).appendTo(l); i.wk++; if (i.wk > 52 && typeof i.gen[parseInt(u, 10) + 1] !== "undefined") { i.wk = (new Date(i.theDateArr[0], i.theDateArr[1], t.__("calStartDay") === 0 ? i.gen[parseInt(u, 10) + 1][1][0] : i.gen[parseInt(u, 10) + 1][0][0])).getWeek(4) } } for (var f = 0, p = i.gen[u].length; f < p; f++) { if (n.calWeekMode) { i.weekMode = i.gen[u][n.calWeekModeDay][0] } if (typeof i.gen[u][f] === "boolean") { e("<div>", { "class": s + "griddate " + s + "griddate-empty" }).appendTo(l) } else { c = t._cal_check(i, i.theDateArr[0], i.gen[u][f][1], i.gen[u][f][0]); if (i.gen[u][f][0]) { e("<div>" + String(i.gen[u][f][0]) + "</div>").addClass(i.thisMonth === i.gen[u][f][1] ? s + "griddate ui-corner-all ui-btn-up-" + c.theme + (c.ok ? "" : " " + s + "griddate-disable") : s + "griddate " + s + "griddate-empty").jqmData("date", n.calWeekMode ? i.weekMode : i.gen[u][f][0]).jqmData("theme", i.thisMonth === i.gen[u][f][1] ? c.theme : "-").jqmData("enabled", c.ok).jqmData("month", i.gen[u][f][1]).appendTo(l) } } } if (n.calControlGroup === true) { l.find(".ui-corner-all").removeClass("ui-corner-all").eq(0).addClass("ui-corner-left").end().last().addClass("ui-corner-right").addClass("ui-controlgroup-last") } l.appendTo(o) } if (n.calShowWeek) { o.find("." + s + "griddate").addClass(s + "griddate-week") } if (n.calShowDateList === true && n.calDateList !== false) { i.datelist = e("<div>"); i.datelistpick = e('<select name="pickdate"></select>').appendTo(i.datelist); i.datelistpick.append('<option value="false" selected="selected">' + t.__("calDateListLabel") + "</option>"); for (r = 0; r < n.calDateList.length; r++) { i.datelistpick.append(e('<option value="' + n.calDateList[r][0] + '">' + n.calDateList[r][1] + "</option>")) } i.datelistpick.on("change", function () { i.datelistdate = e(this).val().split("-"); t.theDate = new t._date(i.datelistdate[0], i.datelistdate[1] - 1, i.datelistdate[2], 0, 0, 0, 0); t.d.input.trigger("datebox", { method: "doset" }) }); i.datelist.find("select").selectmenu({ mini: true, nativeMenu: true }); i.datelist.appendTo(t.d.intHTML) } if (n.useTodayButton || n.useClearButton) { l = e("<div>", { "class": s + "controls" }); if (n.useTodayButton) { e('<a href="#">' + t.__("calTodayButtonLabel") + "</a>").appendTo(l).buttonMarkup({ theme: n.theme, icon: "check", iconpos: "left", corners: true, shadow: true }).on(n.clickEvent, function (e) { e.preventDefault(); t.theDate = new t._date; t.theDate = new t._date(t.theDate.getFullYear(), t.theDate.getMonth(), t.theDate.getDate(), 0, 0, 0, 0); t.d.input.trigger("datebox", { method: "doset" }) }) } if (n.useClearButton) { e('<a href="#">' + t.__("clearButton") + "</a>").appendTo(l).buttonMarkup({ theme: n.theme, icon: "delete", iconpos: "left", corners: true, shadow: true }).on(n.clickEventAlt, function (e) { e.preventDefault(); t.d.input.val(""); t.d.input.trigger("datebox", { method: "clear" }); t.d.input.trigger("datebox", { method: "close" }) }) } if (n.useCollapsedBut) { l.addClass("ui-datebox-collapse") } l.appendTo(o) } t.d.intHTML.on(n.clickEventAlt + " vmouseover vmouseout", "div." + s + "griddate", function (r) { if (r.type === n.clickEventAlt) { r.preventDefault(); if (e(this).jqmData("enabled")) { t.theDate.set(2, 1).set(1, e(this).jqmData("month")).set(2, e(this).jqmData("date")); t.d.input.trigger("datebox", { method: "set", value: t._formatter(t.__fmt(), t.theDate), date: t.theDate }); t.d.input.trigger("datebox", { method: "close" }) } } else { if (e(this).jqmData("enabled") && typeof e(this).jqmData("theme") !== "undefined") { if (n.calWeekMode !== false && n.calWeekHigh === true) { e(this).parent().find("div").each(function () { t._hoover(this) }) } else { t._hoover(this) } } } }); t.d.intHTML.on("swipeleft", function () { if (t.calNext) { t._offset("m", 1) } }).on("swiperight", function () { if (t.calPrev) { t._offset("m", -1) } }); if (t.wheelExists) { t.d.intHTML.on("mousewheel", function (e, n) { e.preventDefault(); if (n > 0 && t.calNext) { t.theDate.set(2, 1); t._offset("m", 1) } if (n < 0 && t.calPrev) { t.theDate.set(2, 1); t._offset("m", -1) } }) } } }) })(jQuery)