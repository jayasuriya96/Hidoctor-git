(function (e) { e.widget("mobile.datebox", e.mobile.widget, { options: { version: "2-1.2.0-2012120900", theme: false, themeDefault: "c", themeHeader: "a", mode: false, centerHoriz: false, centerVert: false, transition: "pop", useAnimation: true, hideInput: false, hideFixedToolbars: false, lockInput: true, enhanceInput: true, zindex: "500", clickEvent: "vclick", clickEventAlt: "click", resizeListener: true, defaultValue: false, dialogEnable: false, dialogForce: false, useModal: false, useInline: false, useInlineBlind: false, useHeader: true, useImmediate: false, useNewStyle: false, useAltIcon: false, overrideStyleClass: false, useButton: true, useFocus: false, useClearButton: false, useCollapsedBut: false, usePlaceholder: false, openCallback: false, openCallbackArgs: [], closeCallback: false, closeCallbackArgs: [], startOffsetYears: false, startOffsetMonths: false, startOffsetDays: false, afterToday: false, beforeToday: false, notToday: false, maxDays: false, minDays: false, maxYear: false, minYear: false, blackDates: false, blackDatesRec: false, blackDays: false, minHour: false, maxHour: false, minuteStep: 1, minuteStepRound: 0, rolloverMode: { m: true, d: true, h: true, i: true, s: true }, useLang: "default", lang: { "default": { setDateButtonLabel: "Set Date", setTimeButtonLabel: "Set Time", setDurationButtonLabel: "Set Duration", calTodayButtonLabel: "Jump to Today", titleDateDialogLabel: "Set Date", titleTimeDialogLabel: "Set Time", daysOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], daysOfWeekShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], monthsOfYear: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsOfYearShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], durationLabel: ["Days", "Hours", "Minutes", "Seconds"], durationDays: ["Day", "Days"], timeFormat: 24, headerFormat: "%A, %B %-d, %Y", tooltip: "Open Date Picker", nextMonth: "Next Month", prevMonth: "Previous Month", dateFieldOrder: ["m", "d", "y"], timeFieldOrder: ["h", "i", "a"], slideFieldOrder: ["y", "m", "d"], dateFormat: "%Y-%m-%d", useArabicIndic: false, isRTL: false, calStartDay: 0, clearButton: "Clear", durationOrder: ["d", "h", "i", "s"], meridiem: ["AM", "PM"], timeOutput: "%k:%M", durationFormat: "%Dd %DA, %Dl:%DM:%DS", calDateListLabel: "Other Dates" } } }, _enhanceDate: function () { e.extend(this._date.prototype, { copy: function (e, t) { if (typeof e === "undefined") { e = [0, 0, 0, 0, 0, 0, 0] } if (typeof t === "undefined") { t = [0, 0, 0, 0, 0, 0, 0] } while (e.length < 7) { e.push(0) } while (t.length < 7) { t.push(0) } return new Date(t[0] > 0 ? t[0] : this.getFullYear() + e[0], t[1] > 0 ? t[1] : this.getMonth() + e[1], t[2] > 0 ? t[2] : this.getDate() + e[2], t[3] > 0 ? t[3] : this.getHours() + e[3], t[4] > 0 ? t[4] : this.getMinutes() + e[4], t[5] > 0 ? t[5] : this.getSeconds() + e[5], t[6] > 0 ? t[5] : this.getMilliseconds() + e[6]) }, adj: function (e, t) { if (typeof t !== "number") { throw new Error("Adjustment value not specified") } if (typeof e !== "number") { throw new Error("Adjustment type not specified") } switch (e) { case 0: this.setFullYear(this.getFullYear() + t); break; case 1: this.setMonth(this.getMonth() + t); break; case 2: this.setDate(this.getDate() + t); break; case 3: this.setHours(this.getHours() + t); break; case 4: this.setMinutes(this.getMinutes() + t); break; case 5: this.setSeconds(this.getSeconds() + t); break; case 6: this.setMilliseconds(this.getMilliseconds() + t); break } return this }, set: function (e, t) { switch (e) { case 0: this.setFullYear(t); break; case 1: this.setMonth(t); break; case 2: this.setDate(t); break; case 3: this.setHours(t); break; case 4: this.setMinutes(t); break; case 5: this.setSeconds(t); break; case 6: this.setMilliseconds(t); break } return this }, get: function (e) { switch (e) { case 0: return this.getFullYear(); case 1: return this.getMonth(); case 2: return this.getDate(); case 3: return this.getHours(); case 4: return this.getMinutes(); case 5: return this.getSeconds() } return false }, iso: function () { return String(this.getFullYear()) + "-" + (this.getMonth() < 9 ? "0" : "") + String(this.getMonth() + 1) + "-" + (this.getDate() < 10 ? "0" : "") + String(this.getDate()) }, comp: function () { return parseInt(this.iso().replace(/-/g, ""), 10) }, getEpoch: function () { return (this.getTime() - this.getMilliseconds()) / 1e3 }, getArray: function () { return [this.getFullYear(), this.getMonth(), this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds()] }, setFirstDay: function (e) { this.set(2, 1).adj(2, e - this.getDay()); if (this.get(2) > 10) { this.adj(2, 7) } return this }, setWeek: function (e, t) { if (e === 4) { return this.set(1, 0).set(2, 1).setFirstDay(4).adj(2, -3).adj(2, (t - 1) * 7) } return this.set(1, 0).set(2, 1).setFirstDay(e).adj(2, (t - 1) * 7) }, getWeek: function (e) { var t, n; switch (e) { case 0: t = this.copy([0, -1 * this.getMonth()]).setFirstDay(0); return Math.floor((this.getTime() - (t.getTime() + (this.getTimezoneOffset() - t.getTimezoneOffset()) * 6e4)) / 6048e5) + 1; case 1: t = this.copy([0, -1 * this.getMonth()]).setFirstDay(1); return Math.floor((this.getTime() - (t.getTime() + (this.getTimezoneOffset() - t.getTimezoneOffset()) * 6e4)) / 6048e5) + 1; case 4: if (this.getMonth() === 11 && this.getDate() > 28) { return 1 } t = this.copy([0, -1 * this.getMonth()], true).setFirstDay(4).adj(2, -3); n = Math.floor((this.getTime() - (t.getTime() + (this.getTimezoneOffset() - t.getTimezoneOffset()) * 6e4)) / 6048e5) + 1; if (n < 1) { t = this.copy([-1, -1 * this.getMonth()]).setFirstDay(4).adj(2, -3); return Math.floor((this.getTime() - t.getTime()) / 6048e5) + 1 } return n; default: return 0 } } }) }, _event: function (t, n) { var r = parseInt(e.mobile.version.replace(/\./g, ""), 10) > 110 ? e(this).data("mobileDatebox") : e(this).data("datebox"); if (!t.isPropagationStopped()) { switch (n.method) { case "close": r.close(); break; case "open": r.open(); break; case "set": e(this).val(n.value); e(this).trigger("change"); break; case "doset": if (e.isFunction(r["_" + r.options.mode + "DoSet"])) { r["_" + r.options.mode + "DoSet"].apply(r, []) } else { e(this).trigger("datebox", { method: "set", value: r._formatter(r.__fmt(), r.theDate), date: r.theDate }) } break; case "dooffset": if (n.type) { r._offset(n.type, n.amount, true) } break; case "dorefresh": r.refresh(); break; case "doreset": r.hardreset(); break; case "doclear": e(this).val("").trigger("change"); break; case "clear": e(this).trigger("change") } } }, _hoover: function (t) { e(t).toggleClass("ui-btn-up-" + e(t).jqmData("theme") + " ui-btn-down-" + e(t).jqmData("theme")) }, _ord: { "default": function (e) { var t = e % 10; if (e > 9 && e < 21) { return "th" } if (t > 3) { return "th" } return ["th", "st", "nd", "rd"][t] } }, __: function (e) { var t = this.options, n = "override" + e.charAt(0).toUpperCase() + e.slice(1); if (typeof t[n] !== "undefined") { return t[n] } if (typeof t.lang[t.useLang][e] !== "undefined") { return t.lang[t.useLang][e] } if (typeof t[t.mode + "lang"] !== "undefined" && typeof t[t.mode + "lang"][e] !== "undefined") { return t[t.mode + "lang"][e] } return t.lang["default"][e] }, __fmt: function () { var e = this, t = this.options; switch (t.mode) { case "timebox": case "timeflipbox": return e.__("timeOutput"); case "durationbox": case "durationflipbox": return e.__("durationFormat"); default: return e.__("dateFormat") } }, _zPad: function (e) { return e < 10 ? "0" + String(e) : String(e) }, _dRep: function (e, t) { var n = 48, r = 57, i = 1584, s = null, o = null, u = ""; if (t === -1) { n += i; r += i; i = -1584 } for (s = 0; s < e.length; s++) { o = e.charCodeAt(s); if (o >= n && o <= r) { u = u + String.fromCharCode(o + i) } else { u = u + String.fromCharCode(o) } } return u }, _doIndic: function () { var t = this; t.d.intHTML.find("*").each(function () { if (e(this).children().length < 1) { e(this).text(t._dRep(e(this).text())) } else { if (e(this).hasClass("ui-datebox-slideday")) { e(this).html(t._dRep(e(this).html())) } } }); t.d.intHTML.find("input").each(function () { e(this).val(t._dRep(e(this).val())) }) }, _parser: { "default": function (e) { return false } }, _n: function (e, t) { return e < 0 ? t : e }, _pa: function (e, t) { if (typeof t === "boolean") { return new this._date(e[0], e[1], e[2], 0, 0, 0, 0) } return new this._date(t.getFullYear(), t.getMonth(), t.getDate(), e[0], e[1], e[2], 0) }, _makeDate: function (t) { t = e.trim(this.__("useArabicIndic") === true ? this._dRep(t, -1) : t); var n = this, r = this.options, i = n.__fmt(), s = null, o = [], u = null, f = null, l = new n._date, c = { year: -1, mont: -1, date: -1, hour: -1, mins: -1, secs: -1, week: false, wtyp: 4, wday: false, yday: false, meri: 0 }, h; if (typeof r.mode === "undefined") { return l } if (typeof n._parser[r.mode] !== "undefined") { return n._parser[r.mode].apply(n, [t]) } if (r.mode === "durationbox" || r.mode === "durationflipbox") { i = i.replace(/%D([a-z])/gi, function (e, t) { switch (t) { case "d": case "l": case "M": case "S": return "(" + e + "|[0-9]+)"; default: return ".+?" } }); i = new RegExp("^" + i + "$"); s = i.exec(t); u = i.exec(n.__fmt()); if (s === null || s.length !== u.length) { if (typeof r.defaultValue === "number" && r.defaultValue > 0) { return new n._date((n.initDate.getEpoch() + parseInt(r.defaultValue, 10)) * 1e3) } return new n._date(n.initDate.getTime()) } f = n.initDate.getEpoch(); for (h = 0; h < s.length; h++) { if (u[h].match(/^%Dd$/i)) { f = f + parseInt(s[h], 10) * 60 * 60 * 24 } if (u[h].match(/^%Dl$/i)) { f = f + parseInt(s[h], 10) * 60 * 60 } if (u[h].match(/^%DM$/i)) { f = f + parseInt(s[h], 10) * 60 } if (u[h].match(/^%DS$/i)) { f = f + parseInt(s[h], 10) } } return new n._date(f * 1e3) } i = i.replace(/%(0|-)*([a-z])/gi, function (e, t, n) { o.push(n); switch (n) { case "p": case "P": case "b": case "B": return "(" + e + "|.+?)"; case "H": case "k": case "I": case "l": case "m": case "M": case "S": case "V": case "U": case "u": case "W": case "d": return "(" + e + "|" + (t === "-" ? "[0-9]{1,2}" : "[0-9]{2}") + ")"; case "j": return "(" + e + "|[0-9]{3})"; case "s": return "(" + e + "|[0-9]+)"; case "g": case "y": return "(" + e + "|[0-9]{2})"; case "E": case "G": case "Y": return "(" + e + "|[0-9]{1,4})"; default: o.pop(); return ".+?" } }); i = new RegExp("^" + i + "$"); s = i.exec(t); u = i.exec(n.__fmt()); if (s === null || s.length !== u.length) { if (r.defaultValue !== false) { switch (typeof r.defaultValue) { case "object": if (r.defaultValue.length === 3) { l = n._pa(r.defaultValue, r.mode === "timebox" || r.mode === "timeflipbox" ? l : false) } break; case "number": l = new n._date(r.defaultValue * 1e3); break; case "string": if (r.mode === "timebox" || r.mode === "timeflipbox") { f = r.defaultValue.split(":"); if (f.length === 3) { l = n._pa([f[0], f[1], f[2]], l) } else { if (f.length === 2) { data = n._pa([f[0], f[1], 0], l) } } } else { f = r.defaultValue.split("-"); if (f.length === 3) { l = n._pa([f[0], f[1] - 1, f[2]], false) } } break } } if (isNaN(l.getDate())) { l = new n._date } } else { for (h = 1; h < s.length; h++) { switch (o[h - 1]) { case "s": return new n._date(parseInt(s[h], 10) * 1e3); case "Y": case "G": c.year = parseInt(s[h], 10); break; case "E": c.year = parseInt(s[h], 10) - 543; break; case "y": case "g": if (r.afterToday === true || parseInt(s[h], 10) < 38) { c.year = parseInt("20" + s[h], 10) } else { c.year = parseInt("19" + s[h], 10) } break; case "m": c.mont = parseInt(s[h], 10) - 1; break; case "d": c.date = parseInt(s[h], 10); break; case "H": case "k": case "I": case "l": c.hour = parseInt(s[h], 10); break; case "M": c.mins = parseInt(s[h], 10); break; case "S": c.secs = parseInt(s[h], 10); break; case "u": c.wday = parseInt(s[h], 10) - 1; break; case "w": c.wday = parseInt(s[h], 10); break; case "j": c.yday = parseInt(s[h], 10); break; case "V": c.week = parseInt(s[h], 10); c.wtyp = 4; break; case "U": c.week = parseInt(s[h], 10); c.wtyp = 0; break; case "W": c.week = parseInt(s[h], 10); c.wtyp = 1; break; case "p": case "P": c.meri = s[h].toLowerCase() === n.__("meridiem")[0].toLowerCase() ? -1 : 1; break; case "b": f = e.inArray(s[h], n.__("monthsOfYearShort")); if (f > -1) { c.mont = f } break; case "B": f = e.inArray(s[h], n.__("monthsOfYear")); if (f > -1) { c.mont = f } break } } if (c.meri !== 0) { if (c.meri === -1 && c.hour === 12) { c.hour = 0 } if (c.meri === 1 && c.hour !== 12) { c.hour = c.hour + 12 } } l = new n._date(n._n(c.year, 0), n._n(c.mont, 0), n._n(c.date, 1), n._n(c.hour, 0), n._n(c.mins, 0), n._n(c.secs, 0), 0); if (c.year < 100 && c.year !== -1) { l.setFullYear(c.year) } if (c.mont > -1 && c.date > -1 || c.hour > -1 && c.mins > -1 && c.secs > -1) { return l } if (c.week !== false) { l.setWeek(c.wtyp, c.week); if (c.date > -1) { l.setDate(c.date) } } if (c.yday !== false) { l.set(1, 0).set(2, 1).adj(2, c.yday - 1) } if (c.wday !== false) { l.adj(2, c.wday - l.getDay()) } } return l }, _customformat: { "default": function (e, t) { return false } }, _formatter: function (e, t) { var n = this, r = this.options, i, s = { part: [0, 0, 0, 0], tp: 0 }; if (r.mode === "durationbox" || r.mode === "durationflipbox") { s.tp = this.theDate.getEpoch() - this.initDate.getEpoch(); s.part[0] = parseInt(s.tp / (60 * 60 * 24), 10); s.tp -= s.part[0] * 60 * 60 * 24; s.part[1] = parseInt(s.tp / (60 * 60), 10); s.tp -= s.part[1] * 60 * 60; s.part[2] = parseInt(s.tp / 60, 10); s.tp -= s.part[2] * 60; s.part[3] = s.tp; if (!e.match(/%Dd/)) { s.part[1] += s.part[0] * 24 } if (!e.match(/%Dl/)) { s.part[2] += s.part[1] * 60 } if (!e.match(/%DM/)) { s.part[3] += s.part[2] * 60 } } e = e.replace(/%(D|X|0|-)*([1-9a-zA-Z])/g, function (e, o, u) { if (o === "X") { if (typeof n._customformat[r.mode] !== "undefined") { return n._customformat[r.mode](u, t) } return e } if (o === "D") { switch (u) { case "d": return s.part[0]; case "l": return n._zPad(s.part[1]); case "M": return n._zPad(s.part[2]); case "S": return n._zPad(s.part[3]); case "A": return s.part[0] > 1 ? n.__("durationDays")[1] : n.__("durationDays")[0]; default: return e } } switch (u) { case "%": return "%"; case "a": return n.__("daysOfWeekShort")[t.getDay()]; case "A": return n.__("daysOfWeek")[t.getDay()]; case "b": return n.__("monthsOfYearShort")[t.getMonth()]; case "B": return n.__("monthsOfYear")[t.getMonth()]; case "C": return t.getFullYear().toString().substr(0, 2); case "d": return o === "-" ? t.getDate() : n._zPad(t.getDate()); case "H": case "k": return o === "-" ? t.getHours() : n._zPad(t.getHours()); case "I": case "l": return o === "-" ? t.getHours() === 0 || t.getHours() === 12 ? 12 : t.getHours() < 12 ? t.getHours() : t.getHours() - 12 : n._zPad(t.getHours() === 0 || t.getHours() === 12 ? 12 : t.getHours() < 12 ? t.getHours() : t.getHours() - 12); case "m": return o === "-" ? t.getMonth() + 1 : n._zPad(t.getMonth() + 1); case "M": return o === "-" ? t.getMinutes() : n._zPad(t.getMinutes()); case "p": return t.getHours() < 12 ? n.__("meridiem")[0].toUpperCase() : n.__("meridiem")[1].toUpperCase(); case "P": return t.getHours() < 12 ? n.__("meridiem")[0].toLowerCase() : n.__("meridiem")[1].toLowerCase(); case "s": return t.getEpoch(); case "S": return o === "-" ? t.getSeconds() : n._zPad(t.getSeconds()); case "u": return o === "-" ? t.getDay() + 1 : n._zPad(t.getDay() + 1); case "w": return t.getDay(); case "y": return t.getFullYear().toString().substr(2, 2); case "Y": return t.getFullYear(); case "E": return t.getFullYear() + 543; case "V": return o === "-" ? t.getWeek(4) : n._zPad(t.getWeek(4)); case "U": return o === "-" ? t.getWeek(0) : n._zPad(t.getWeek(0)); case "W": return o === "-" ? t.getWeek(1) : n._zPad(t.getWeek(1)); case "o": if (typeof n._ord[r.useLang] !== "undefined") { return n._ord[r.useLang](t.getDate()) } return n._ord["default"](t.getDate()); case "j": i = new Date(t.getFullYear(), 0, 1); i = Math.ceil((t - i) / 864e5) + 1; return (i < 100 ? i < 10 ? "00" : "0" : "") + String(i); case "G": if (t.getWeek(4) === 1 && t.getMonth() > 0) { return t.getFullYear() + 1 } if (t.getWeek(4) > 51 && t.getMonth() < 11) { return t.getFullYear() - 1 } return t.getFullYear(); case "g": if (t.getWeek(4) === 1 && t.getMonth() > 0) { return parseInt(t.getFullYear().toString().substr(2, 2), 10) + 1 } if (t.getWeek(4) > 51 && t.getMonth() < 11) { return parseInt(t.getFullYear().toString().substr(2, 2), 10) - 1 } return t.getFullYear().toString().substr(2, 2); default: return e } }); if (n.__("useArabicIndic") === true) { e = n._dRep(e) } return e }, _btwn: function (e, t, n) { return e > t && e < n }, _minStepFix: function () { var e = this.theDate.get(4), t, n = this, r = this.options; if (r.minuteStep > 1 && e % r.minuteStep > 0) { if (r.minuteStepRound < 0) { e = e - e % r.minuteStep } else { if (r.minStepRound > 0) { e = e + (r.minuteStep - e % r.minuteStep) } else { if (e % r.minuteStep < r.minuteStep / 2) { e = e - e % r.minuteStep } else { e = e + (r.minuteStep - e % r.minuteStep) } } } n.theDate.setMinutes(e) } }, _offset: function (t, n, r) { var i = this, s = this.options, o = false; t = (t || "").toLowerCase(); if (typeof r === "undefined") { r = true } i.d.input.trigger("datebox", { method: "offset", type: t, amount: n }); if (t !== "a" && (typeof s.rolloverMode[t] === "undefined" || s.rolloverMode[t] === true)) { o = e.inArray(t, ["y", "m", "d", "h", "i", "s"]) } else { switch (t) { case "y": o = 0; break; case "m": if (i._btwn(i.theDate.getMonth() + n, -1, 12)) { o = 1 } break; case "d": if (i._btwn(i.theDate.getDate() + n, 0, 32 - i.theDate.copy([0], [0, 0, 32, 13]).getDate() + 1)) { o = 2 } break; case "h": if (i._btwn(i.theDate.getHours() + n, -1, 24)) { o = 3 } break; case "i": if (i._btwn(i.theDate.getMinutes() + n, -1, 60)) { o = 4 } break; case "s": if (i._btwn(i.theDate.getSeconds() + n, -1, 60)) { o = 5 } break; case "a": i._offset("h", (n > 0 ? 1 : -1) * 12, false); break } } if (o !== false) { i.theDate.adj(o, n) } if (r === true) { i.refresh() } if (s.useImmediate) { i.d.input.trigger("datebox", { method: "doset" }) } }, _startOffset: function (e) { var t = this.options; if (t.startOffsetYears !== false) { e.adj(0, t.startOffsetYears) } if (t.startOffsetMonths !== false) { e.adj(1, t.startOffsetMonths) } if (t.startOffsetDays !== false) { e.adj(2, t.startOffsetDays) } return e }, _create: function () { e(document).trigger("dateboxcreate"); var t = this, n = e.extend(this.options, typeof this.element.jqmData("options") !== "undefined" ? this.element.jqmData("options") : this._getLongOptions(this.element)), r = n.theme === false && typeof e(this).jqmData("theme") === "undefined" ? typeof this.element.parentsUntil(":jqmData(theme)").parent().jqmData("theme") === "undefined" ? n.themeDefault : this.element.parentsUntil(":jqmData(theme)").parent().jqmData("theme") : n.theme, i = n.useAnimation ? n.transition : "none", s = n.useNewStyle === false ? { input: this.element, wrap: this.element.wrap('<div class="ui-input-datebox ui-shadow-inset ui-corner-all ' + (this.element.jqmData("mini") === true ? "ui-mini " : "") + "ui-body-" + r + '"></div>').parent(), mainWrap: e("<div>", { "class": "ui-datebox-container ui-overlay-shadow ui-corner-all ui-datebox-hidden " + i + " ui-body-" + r }).css("zIndex", n.zindex), intHTML: false } : { input: this.element, wrap: this.element, mainWrap: e("<div>", { "class": "ui-datebox-container ui-overlay-shadow ui-corner-all ui-datebox-hidden " + i + " ui-body-" + r }).css("zIndex", n.zindex), intHTML: false }, o = typeof window.ontouchstart !== "undefined", u = { eStart: (o ? "touchstart" : "mousedown") + ".datebox", eMove: (o ? "touchmove" : "mousemove") + ".datebox", eEnd: (o ? "touchend" : "mouseup") + ".datebox", eEndA: o ? "mouseup.datebox touchend.datebox touchcancel.datebox touchmove.datebox" : "mouseup.datebox", move: false, start: false, end: false, pos: false, target: false, delta: false, tmp: false }, f = {}, l = typeof e.mobile.ns !== "undefined" ? e.mobile.ns : ""; e.extend(t, { d: s, ns: l, drag: u, touch: o }); if (n.usePlaceholder !== false) { if (n.usePlaceholder === true && t._grabLabel() !== false) { t.d.input.attr("placeholder", t._grabLabel()) } if (typeof n.usePlaceholder === "string") { t.d.input.attr("placeholder", n.usePlaceholder) } } n.theme = r; t.clearFunc = false; t.disabled = false; t.runButton = false; t._date = window.Date; t._enhanceDate(); t.initDate = new t._date; t.theDate = n.defaultValue ? t._makeDate(n.defaultValue) : new t._date; t.initDone = false; if (n.useButton === true && n.useInline === false && n.useNewStyle === false) { t.d.open = e('<a href="#" class="ui-input-clear" title="' + this.__("tooltip") + '">' + this.__("tooltip") + "</a>").on(n.clickEvent, function (n) { n.preventDefault(); if (!t.disabled) { t.d.input.trigger("datebox", { method: "open" }); t.d.wrap.addClass("ui-focus"); t.d.input.parent().removeClass("ui-focus") } setTimeout(function () { e(n.target).closest("a").removeClass(e.mobile.activeBtnClass) }, 300) }).appendTo(t.d.wrap).buttonMarkup({ icon: "grid", iconpos: "notext", corners: true, shadow: true }).css({ "vertical-align": "middle", display: "inline-block" }) } t.d.screen = e("<div>", { "class": "ui-datebox-screen ui-datebox-hidden" + (n.useModal ? " ui-datebox-screen-modal" : "") }).css({ "z-index": n.zindex - 1 }).on(n.clickEventAlt, function (e) { e.preventDefault(); t.d.input.trigger("datebox", { method: "close" }) }); if (n.enhanceInput === true && navigator.userAgent.match(/Android/i)) { t.inputType = "number" } else { t.inputType = "text" } if (n.hideInput) { t.d.wrap.hide() } e("label[for='" + t.d.input.attr("id") + "']").addClass("ui-input-text").css("verticalAlign", "middle"); t.d.wrap.on(n.clickEvent, function () { if (!t.disabled && (n.noButtonFocusMode || n.focusMode)) { t.d.input.trigger("datebox", { method: "open" }); t.d.wrap.addClass("ui-focus"); t.d.input.removeClass("ui-focus") } }); t.d.input.removeClass("ui-corner-all ui-shadow-inset").bind(t.touch ? "touchend" : "click", function (e) { if (t.disabled === false && n.useNewStyle === true && n.useFocus === false) { if ((t.touch ? e.originalEvent.changedTouches[0].pageX : e.pageX) - e.target.offsetLeft > e.target.offsetWidth - 20) { t.d.input.trigger("datebox", { method: "open" }); t.d.wrap.addClass("ui-focus"); t.d.input.removeClass("ui-focus") } } }).focus(function () { if (t.disabled === false && n.useFocus === true) { t.d.input.trigger("datebox", { method: "open" }); t.d.wrap.addClass("ui-focus") } if (n.useNewStyle === false) { t.d.input.removeClass("ui-focus") } }).blur(function () { t.d.wrap.removeClass("ui-focus"); t.d.input.removeClass("ui-focus") }).change(function () { t.theDate = t._makeDate(t.d.input.val()); t.refresh() }).attr("readonly", n.lockInput).on("datebox", t._event); if (n.useNewStyle === true) { t.d.input.addClass("ui-corner-all " + (n.useAltIcon === true ? "ui-icon-datebox-alt" : "ui-icon-datebox")); if (n.overrideStyleClass !== false) { t.d.input.addClass(n.overrideStyleClass) } } else { t.d.input.parent().css("border", "none").removeClass("ui-shadow-inset") } if (typeof e.event.special.mousewheel !== "undefined") { t.wheelExists = true } if (t.d.input.is(":disabled")) { t.disable() } if (n.useInline === true || n.useInlineBlind) { t.open() } if (n.minDays === false && typeof t.d.input.attr("min") !== "undefined") { f.today = new t._date; f.lod = 24 * 60 * 60 * 1e3; f.todayc = new t._date(f.today.getFullYear(), f.today.getMonth(), f.today.getDate(), 0, 0, 0, 0); f.fromel = t.d.input.attr("min").split("-"); f.compdt = new t._date(f.fromel[0], f.fromel[1] - 1, f.fromel[2], 0, 0, 0, 0); n.minDays = parseInt((f.compdt.getTime() - f.todayc.getTime()) / f.lod * -1, 10) } if (n.maxDays === false && typeof t.d.input.attr("max") !== "undefined") { f.today = new t._date; f.lod = 24 * 60 * 60 * 1e3; f.todayc = new t._date(f.today.getFullYear(), f.today.getMonth(), f.today.getDate(), 0, 0, 0, 0); f.fromel = t.d.input.attr("max").split("-"); f.compdt = new t._date(f.fromel[0], f.fromel[1] - 1, f.fromel[2], 0, 0, 0, 0); n.maxDays = parseInt((f.compdt.getTime() - f.todayc.getTime()) / f.lod, 10) } e(document).trigger("dateboxaftercreate") }, _build: { "default": function () { this.d.headerText = "Error"; this.d.intHTML = e("<div class='ui-body-e'><h2 style='text-align:center'>There is no mode by that name loaded / mode not given</h2></div>") } }, _applyCoords: function (t) { var n = t.widget, r = t.widget.options, i = { h: e.mobile.activePage.find(".ui-header").jqmData("position"), f: e.mobile.activePage.find(".ui-footer").jqmData("position"), fh: e.mobile.activePage.find(".ui-footer").outerHeight(), hh: e.mobile.activePage.find(".ui-header").outerHeight() }, s = { x: n.d.wrap.offset().left + n.d.wrap.outerWidth() / 2, y: n.d.wrap.offset().top + n.d.wrap.outerHeight() / 2 }, o = { w: n.d.mainWrap.outerWidth(), h: n.d.mainWrap.outerHeight() }, u = { t: e(window).scrollTop(), h: e(window).height(), w: e.mobile.activePage.width(), ah: e(document).height() }, f = { y: r.centerVert ? u.t + (u.h / 2 - o.h / 2) : s.y - o.h / 2, x: u.w < 400 || r.centerHoriz ? u.w / 2 - o.w / 2 : s.x - o.w / 2 }; if (r.centerVert === false) { if (r.hideFixedToolbars === true && (typeof i.f !== "undefined" || typeof i.h !== "undefined")) { e.mobile.activePage.find(":jqmData(position='fixed')").fixedtoolbar("hide"); i.f = undefined; i.h = undefined } if (typeof i.f !== "undefined") { if (f.y + o.h > u.h - i.fh - 2) { f.y = u.h - i.fh - 2 - o.h } } else { if (f.y + o.h > u.ah - i.fh - 2) { f.y = u.ah - i.fh - 2 - o.h } if (u.h + u.t < o.h + f.y + 2) { f.y = u.h + u.t - o.h - 2 } } if (typeof i.h !== "undefined") { if (u.t + i.hh + 2 > f.y) { f.y = u.t + i.hh + 2 } } else { if (i.hh + 2 > f.y) { f.y = i.hh + 2 } if (f.y < u.t + 2) { f.y = u.t + 2 } } } n.d.mainWrap.css({ position: "absolute", top: f.y, left: f.x }) }, _drag: { "default": function () { return false } }, open: function () { var t = this, n = this.options, r = "data-" + this.ns, i = n.useAnimation ? n.transition : "none"; if (n.useFocus === true && t.fastReopen === true) { t.d.input.blur(); return false } if (t.clearFunc !== false) { clearTimeout(t.clearFunc); t.clearFunc = false } if (n.openCallback !== false) { if (!e.isFunction(n.openCallback)) { if (typeof window[n.openCallback] !== "undefined") { n.openCallback = window[n.openCallback] } else { n.openCallback = new Function(n.openCallback) } } if (n.openCallback.apply(t, e.merge([t.theDate], n.openCallbackArgs)) === false) { return false } } t.theDate = t._makeDate(t.d.input.val()); if (t.d.input.val() === "") { t._startOffset(t.theDate) } t.d.input.blur(); if (typeof t._build[n.mode] === "undefined") { t._build["default"].apply(t, []) } else { t._build[n.mode].apply(t, []) } if (typeof t._drag[n.mode] !== "undefined") { t._drag[n.mode].apply(t, []) } t.d.input.trigger("datebox", { method: "refresh" }); if (t.__("useArabicIndic") === true) { t._doIndic() } if ((n.useInline === true || n.useInlineBlind === true) && t.initDone === false) { t.d.mainWrap.append(t.d.intHTML); t.d.input.parent().parent().append(t.d.mainWrap); t.d.mainWrap.removeClass("ui-datebox-hidden"); if (n.useInline === true) { t.d.mainWrap.addClass("ui-datebox-inline") } else { t.d.mainWrap.addClass("ui-datebox-inlineblind"); t.d.mainWrap.hide() } t.initDone = false; t.d.input.trigger("datebox", { method: "postrefresh" }) } if (n.useImmediate) { t.d.input.trigger("datebox", { method: "doset" }) } if (n.useInline) { return true } if (n.useInlineBlind) { if (t.initDone) { t.d.mainWrap.slideDown() } else { t.initDone = true } return true } if (t.d.intHTML.is(":visible")) { return false } if (n.dialogForce || n.dialogEnable && window.width() < 400) { t.d.dialogPage = e("<div " + r + "role='dialog' " + r + "theme='" + n.theme + "' ><div " + r + "role='header' " + r + "theme='" + n.themeHeader + "'><h1>" + t.d.headerText + "</h1></div><div " + r + "role='content'></div>").appendTo(e.mobile.pageContainer).page().css("minHeight", "0px").addClass(i); t.d.dialogPage.find(".ui-header").find("a").off("click vclick").on(n.clickEventAlt, function (e) { e.preventDefault(); t.d.input.trigger("datebox", { method: "close" }) }); t.d.mainWrap.append(t.d.intHTML).css({ marginLeft: "auto", marginRight: "auto" }).removeClass("ui-datebox-hidden"); t.d.dialogPage.find(".ui-content").append(t.d.mainWrap); t.d.input.trigger("datebox", { method: "postrefresh" }); e.mobile.activePage.off("pagehide.remove"); e.mobile.changePage(t.d.dialogPage, { transition: i }) } else { t.d.dialogPage = false; t.d.mainWrap.empty(); if (n.useHeader === true) { t.d.headHTML = e('<div class="ui-header ui-bar-' + n.themeHeader + '"></div>'); e("<a class='ui-btn-left' href='#'>Close</a>").appendTo(t.d.headHTML).buttonMarkup({ theme: n.themeHeader, icon: "delete", iconpos: "notext", corners: true, shadow: true }).on(n.clickEventAlt, function (e) { e.preventDefault(); t.d.input.trigger("datebox", { method: "close" }) }); e('<h1 class="ui-title">' + t.d.headerText + "</h1>").appendTo(t.d.headHTML); t.d.mainWrap.append(t.d.headHTML) } t.d.mainWrap.append(t.d.intHTML).css("zIndex", n.zindex); t.d.mainWrap.appendTo(e.mobile.activePage); t.d.screen.appendTo(e.mobile.activePage); t.d.input.trigger("datebox", { method: "postrefresh" }); t._applyCoords({ widget: t }); if (n.useModal === true) { if (n.useAnimation) { t.d.screen.fadeIn("slow") } else { t.d.screen.show() } } else { setTimeout(function () { t.d.screen.removeClass("ui-datebox-hidden") }, 500) } t.d.mainWrap.addClass("ui-overlay-shadow in").removeClass("ui-datebox-hidden"); e(document).on("orientationchange.datebox", { widget: t }, function (e) { t._applyCoords(e.data) }); if (n.resizeListener === true) { e(window).on("resize.datebox", { widget: t }, function (e) { t._applyCoords(e.data) }) } } }, close: function () { var t = this, n = this.options; if (n.useInlineBlind === true) { t.d.mainWrap.slideUp(); return true } if (n.useInline === true || t.d.intHTML === false) { return true } if (t.d.dialogPage !== false) { e(t.d.dialogPage).dialog("close"); if (!e.mobile.activePage.jqmData("page").options.domCache) { e.mobile.activePage.on("pagehide.remove", function () { e(this).remove() }) } t.d.intHTML.detach().empty(); t.d.mainWrap.detach().empty(); t.d.wrap.removeClass("ui-focus"); t.clearFunc = setTimeout(function () { t.d.dialogPage.empty().remove(); t.clearFunc = false }, 1500) } else { if (n.useModal) { if (n.useAnimation) { t.d.screen.fadeOut("slow") } else { t.d.screen.hide() } } else { t.d.screen.addClass("ui-datebox-hidden") } t.d.screen.detach(); t.d.mainWrap.addClass("ui-datebox-hidden").removeAttr("style").removeClass("in ui-overlay-shadow").empty().detach(); t.d.intHTML.detach(); t.d.wrap.removeClass("ui-focus"); e(document).off("orientationchange.datebox"); if (n.resizeListener === true) { e(window).off("resize.datebox") } } e(document).off(t.drag.eMove); e(document).off(t.drag.eEnd); e(document).off(t.drag.eEndA); if (n.useFocus) { t.fastReopen = true; setTimeout(function (e) { return function () { e.fastReopen = false } }(t), 300) } if (n.closeCallback !== false) { if (!e.isFunction(n.closeCallback)) { if (typeof window[n.closeCallback] !== "undefined") { n.closeCallback = window[n.closeCallback] } else { n.closeCallback = new Function(n.closeCallback) } } n.closeCallback.apply(t, e.merge([t.theDate], n.closeCallbackArgs)) } }, refresh: function () { if (typeof this._build[this.options.mode] === "undefined") { this._build["default"].apply(this, []) } else { this._build[this.options.mode].apply(this, []) } if (this.__("useArabicIndic") === true) { this._doIndic() } this.d.mainWrap.append(this.d.intHTML); this.d.input.trigger("datebox", { method: "postrefresh" }) }, _check: function () { var t = this, n = null, r = this.options; t.dateOK = true; if (r.afterToday !== false) { n = new t._date; if (t.theDate < n) { t.theDate = n } } if (r.beforeToday !== false) { n = new t._date; if (t.theDate > n) { t.theDate = n } } if (r.maxDays !== false) { n = new t._date; n.adj(2, r.maxDays); if (t.theDate > n) { t.theDate = n } } if (r.minDays !== false) { n = new t._date; n.adj(2, -1 * r.minDays); if (t.theDate < n) { t.theDate = n } } if (r.minHour !== false) { if (t.theDate.getHours() < r.minHour) { t.theDate.setHours(r.minHour) } } if (r.maxHour !== false) { if (t.theDate.getHours() > r.maxHour) { t.theDate.setHours(r.maxHour) } } if (r.maxYear !== false) { n = new t._date(r.maxYear, 0, 1); n.adj(2, -1); if (t.theDate > n) { t.theDate = n } } if (r.minYear !== false) { n = new t._date(r.minYear, 0, 1); if (t.theDate < n) { t.theDate = n } } if (e.inArray(r.mode, ["timebox", "durationbox", "durationflipbox", "timeflipbox"]) > -1) { if (r.mode === "timeflipbox" && r.validHours !== false) { if (e.inArray(t.theDate.getHours(), r.validHours) < 0) { t.dateOK = false } } } else { if (r.blackDatesRec !== false) { for (i = 0; i < r.blackDatesRec.length; i++) { if ((r.blackDatesRec[i][0] === -1 || r.blackDatesRec[i][0] === year) && (r.blackDatesRec[i][1] === -1 || r.blackDatesRec[i][1] === month) && (r.blackDatesRec[i][2] === -1 || r.blackDatesRec[i][2] === date)) { t.dateOK = false } } } if (r.blackDates !== false) { if (e.inArray(t.theDate.iso(), r.blackDates) > -1) { t.dateOK = false } } if (r.blackDays !== false) { if (e.inArray(t.theDate.getDay(), r.blackDays) > -1) { t.dateOK = false } } } }, _grabLabel: function () { var e = this, t = this.options; if (typeof t.overrideDialogLabel === "undefined") { if (typeof e.d.input.attr("placeholder") !== "undefined") { return e.d.input.attr("placeholder") } if (typeof e.d.input.attr("title") !== "undefined") { return e.d.input.attr("title") } if (e.d.wrap.parent().find("label[for='" + e.d.input.attr("id") + "']").text() !== "") { return e.d.wrap.parent().find("label[for='" + e.d.input.attr("id") + "']").text() } return false } return t.overrideDialogLabel }, _makeEl: function (e, t) { var n = false, r = false; r = e.clone(); if (typeof t.attr !== "undefined") { for (n in t.attr) { if (t.attr.hasOwnProperty(n)) { r.jqmData(n, t.attr[n]) } } } return r }, _getLongOptions: function (t) { var n, r = {}, i, s; if (e.mobile.ns === "") { i = "datebox" } else { i = e.mobile.ns.substr(0, e.mobile.ns.length - 1) + "Datebox" } for (n in t.data()) { if (n.substr(0, i.length) === i && n.length > i.length) { s = n.substr(i.length); s = s.charAt(0).toLowerCase() + s.slice(1); r[s] = t.data(n) } } return r }, disable: function () { this.d.input.attr("disabled", true); this.d.wrap.addClass("ui-disabled").blur(); this.disabled = true; this.d.input.trigger("datebox", { method: "disable" }) }, enable: function () { this.d.input.attr("disabled", false); this.d.wrap.removeClass("ui-disabled"); this.disabled = false; this.d.input.trigger("datebox", { method: "enable" }) }, _setOption: function () { e.Widget.prototype._setOption.apply(this, arguments); this.refresh() }, getTheDate: function () { return this.theDate }, getLastDur: function () { return this.lastDuration }, setTheDate: function (e) { this.theDate = e; this.refresh() }, callFormat: function (e, t) { return this._formatter(e, t) } }); e(document).on("pagebeforecreate", function (t) { e(":jqmData(role='datebox')", t.target).each(function () { e(this).prop("type", "text") }) }); e(document).on("pagecreate create", function (t) { e(document).trigger("dateboxbeforecreate"); e(":jqmData(role='datebox')", t.target).each(function () { var t = parseInt(e.mobile.version.replace(/\./g, ""), 10) > 110 ? typeof e(this).data("mobileDatebox") : typeof e(this).data("datebox"); if (t === "undefined") { e(this).datebox() } }) }) })(jQuery)