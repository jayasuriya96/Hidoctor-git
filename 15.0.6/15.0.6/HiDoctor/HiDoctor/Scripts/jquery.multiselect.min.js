(function (e) { var t = 0; e.widget("ech.multiselect", { options: { header: !0, height: 175, minWidth: 225, classes: "", checkAllText: "Check all", uncheckAllText: "Uncheck all", noneSelectedText: "Select options", selectedText: "# selected", selectedList: 0, show: null, hide: null, autoOpen: !1, multiple: !0, position: {} }, _create: function () { var t = this.element.hide(), n = this.options; this.speed = e.fx.speeds._default; this._isOpen = !1; t = (this.button = e('<button type="button"><span class="ui-icon ui-icon-triangle-2-n-s"></span></button>')).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all").addClass(n.classes).attr({ title: t.attr("title"), "aria-haspopup": !0, tabIndex: t.attr("tabIndex") }).insertAfter(t); (this.buttonlabel = e("<span />")).html(n.noneSelectedText).appendTo(t); var t = (this.menu = e("<div />")).addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all").addClass(n.classes).appendTo(document.body), r = (this.header = e("<div />")).addClass("ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix").appendTo(t); (this.headerLinkContainer = e("<ul />")).addClass("ui-helper-reset").html(function () { return !0 === n.header ? '<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"></span><span>' + n.checkAllText + '</span></a></li><li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"></span><span>' + n.uncheckAllText + "</span></a></li>" : "string" === typeof n.header ? "<li>" + n.header + "</li>" : "" }).append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ui-icon-circle-close"></span></a></li>').appendTo(r); (this.checkboxContainer = e("<ul />")).addClass("ui-multiselect-checkboxes ui-helper-reset").appendTo(t); this._bindEvents(); this.refresh(!0); n.multiple || t.addClass("ui-multiselect-single") }, _init: function () { !1 === this.options.header && this.header.hide(); this.options.multiple || this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide(); this.options.autoOpen && this.open(); this.element.is(":disabled") && this.disable() }, refresh: function (n) { var r = this.element, i = this.options, s = this.menu, o = this.checkboxContainer, u = [], a = "", f = r.attr("id") || t++; r.find("option").each(function (t) { e(this); var n = this.parentNode, r = this.innerHTML, s = this.title, o = this.value, t = "ui-multiselect-" + (this.id || f + "-option-" + t), l = this.disabled, h = this.selected, p = ["ui-corner-all"], v = (l ? "ui-multiselect-disabled " : " ") + this.className, m; "OPTGROUP" === n.tagName && (m = n.getAttribute("label"), -1 === e.inArray(m, u) && (a += '<li class="ui-multiselect-optgroup-label ' + n.className + '"><a href="#">' + m + "</a></li>", u.push(m))); l && p.push("ui-state-disabled"); h && !i.multiple && p.push("ui-state-active"); a += '<li class="' + v + '">'; a += '<label for="' + t + '" title="' + s + '" class="' + p.join(" ") + '">'; a += '<input id="' + t + '" name="multiselect_' + f + '" type="' + (i.multiple ? "checkbox" : "radio") + '" value="' + o + '" title="' + r + '"'; h && (a += ' checked="checked"', a += ' aria-selected="true"'); l && (a += ' disabled="disabled"', a += ' aria-disabled="true"'); a += " /><span>" + r + "</span></label></li>" }); o.html(a); this.labels = s.find("label"); this.inputs = this.labels.children("input"); this._setButtonWidth(); this._setMenuWidth(); this.button[0].defaultValue = this.update(); n || this._trigger("refresh") }, update: function () { var t = this.options, n = this.inputs, r = n.filter(":checked"), i = r.length, t = 0 === i ? t.noneSelectedText : e.isFunction(t.selectedText) ? t.selectedText.call(this, i, n.length, r.get()) : /\d/.test(t.selectedList) && 0 < t.selectedList && i <= t.selectedList ? r.map(function () { return e(this).next().html() }).get().join(", ") : t.selectedText.replace("#", i).replace("#", n.length); this.buttonlabel.html(t); return t }, _bindEvents: function () { function t() { n[n._isOpen ? "close" : "open"](); return !1 } var n = this, r = this.button; r.find("span").bind("click.multiselect", t); r.bind({ click: t, keypress: function (e) { switch (e.which) { case 27: case 38: case 37: n.close(); break; case 39: case 40: n.open() } }, mouseenter: function () { r.hasClass("ui-state-disabled") || e(this).addClass("ui-state-hover") }, mouseleave: function () { e(this).removeClass("ui-state-hover") }, focus: function () { r.hasClass("ui-state-disabled") || e(this).addClass("ui-state-focus") }, blur: function () { e(this).removeClass("ui-state-focus") } }); this.header.delegate("a", "click.multiselect", function (t) { if (e(this).hasClass("ui-multiselect-close")) n.close(); else n[e(this).hasClass("ui-multiselect-all") ? "checkAll" : "uncheckAll"](); t.preventDefault() }); this.menu.delegate("li.ui-multiselect-optgroup-label a", "click.multiselect", function (t) { t.preventDefault(); var r = e(this), i = r.parent().nextUntil("li.ui-multiselect-optgroup-label").find("input:visible:not(:disabled)"), s = i.get(), r = r.parent().text(); !1 !== n._trigger("beforeoptgrouptoggle", t, { inputs: s, label: r }) && (n._toggleChecked(i.filter(":checked").length !== i.length, i), n._trigger("optgrouptoggle", t, { inputs: s, label: r, checked: s[0].checked })) }).delegate("label", "mouseenter.multiselect", function () { e(this).hasClass("ui-state-disabled") || (n.labels.removeClass("ui-state-hover"), e(this).addClass("ui-state-hover").find("input").focus()) }).delegate("label", "keydown.multiselect", function (t) { t.preventDefault(); switch (t.which) { case 9: case 27: n.close(); break; case 38: case 40: case 37: case 39: n._traverse(t.which, this); break; case 13: e(this).find("input")[0].click() } }).delegate('input[type="checkbox"], input[type="radio"]', "click.multiselect", function (t) { var r = e(this), i = this.value, s = this.checked, o = n.element.find("option"); this.disabled || !1 === n._trigger("click", t, { value: i, text: this.title, checked: s }) ? t.preventDefault() : (r.focus(), r.attr("aria-selected", s), o.each(function () { this.value === i ? this.selected = s : n.options.multiple || (this.selected = !1) }), n.options.multiple || (n.labels.removeClass("ui-state-active"), r.closest("label").toggleClass("ui-state-active", s), n.close()), n.element.trigger("change"), setTimeout(e.proxy(n.update, n), 10)) }); e(document).bind("mousedown.multiselect", function (t) { n._isOpen && !e.contains(n.menu[0], t.target) && !e.contains(n.button[0], t.target) && t.target !== n.button[0] && n.close() }); e(this.element[0].form).bind("reset.multiselect", function () { setTimeout(e.proxy(n.refresh, n), 10) }) }, _setButtonWidth: function () { var e = this.element.outerWidth(), t = this.options; /\d/.test(t.minWidth) && e < t.minWidth && (e = t.minWidth); this.button.width(e) }, _setMenuWidth: function () { var e = this.menu, t = this.button.outerWidth() - parseInt(e.css("padding-left"), 10) - parseInt(e.css("padding-right"), 10) - parseInt(e.css("border-right-width"), 10) - parseInt(e.css("border-left-width"), 10); e.width(t || this.button.outerWidth()) }, _traverse: function (t, n) { var r = e(n), i = 38 === t || 37 === t, r = r.parent()[i ? "prevAll" : "nextAll"]("li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup-label)")[i ? "last" : "first"](); r.length ? r.find("label").trigger("mouseover") : (r = this.menu.find("ul").last(), this.menu.find("label")[i ? "last" : "first"]().trigger("mouseover"), r.scrollTop(i ? r.height() : 0)) }, _toggleState: function (e, t) { return function () { this.disabled || (this[e] = t); t ? this.setAttribute("aria-selected", !0) : this.removeAttribute("aria-selected") } }, _toggleChecked: function (t, n) { var r = n && n.length ? n : this.inputs, i = this; r.each(this._toggleState("checked", t)); r.eq(0).focus(); this.update(); var s = r.map(function () { return this.value }).get(); this.element.find("option").each(function () { !this.disabled && -1 < e.inArray(this.value, s) && i._toggleState("selected", t).call(this) }); r.length && this.element.trigger("change") }, _toggleDisabled: function (t) { this.button.attr({ disabled: t, "aria-disabled": t })[t ? "addClass" : "removeClass"]("ui-state-disabled"); var n = this.menu.find("input"), n = t ? n.filter(":enabled").data("ech-multiselect-disabled", !0) : n.filter(function () { return !0 === e.data(this, "ech-multiselect-disabled") }).removeData("ech-multiselect-disabled"); n.attr({ disabled: t, "arial-disabled": t }).parent()[t ? "addClass" : "removeClass"]("ui-state-disabled"); this.element.attr({ disabled: t, "aria-disabled": t }) }, open: function () { var t = this.button, n = this.menu, r = this.speed, i = this.options, s = []; if (!(!1 === this._trigger("beforeopen") || t.hasClass("ui-state-disabled") || this._isOpen)) { var o = n.find("ul").last(), u = i.show, a = t.offset(); e.isArray(i.show) && (u = i.show[0], r = i.show[1] || this.speed); u && (s = [u, r]); o.scrollTop(0).height(i.height); e.ui.position && !e.isEmptyObject(i.position) ? (i.position.of = i.position.of || t, n.show().position(i.position).hide()) : n.css({ top: a.top + t.outerHeight(), left: a.left }); e.fn.show.apply(n, s); this.labels.eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus"); t.addClass("ui-state-active"); this._isOpen = !0; this._trigger("open") } }, close: function () { if (!1 !== this._trigger("beforeclose")) { var t = this.options, n = t.hide, r = this.speed, i = []; e.isArray(t.hide) && (n = t.hide[0], r = t.hide[1] || this.speed); n && (i = [n, r]); e.fn.hide.apply(this.menu, i); this.button.removeClass("ui-state-active").trigger("blur").trigger("mouseleave"); this._isOpen = !1; this._trigger("close") } }, enable: function () { this._toggleDisabled(!1) }, disable: function () { this._toggleDisabled(!0) }, checkAll: function () { this._toggleChecked(!0); this._trigger("checkAll") }, uncheckAll: function () { this._toggleChecked(!1); this._trigger("uncheckAll") }, getChecked: function () { return this.menu.find("input").filter(":checked") }, destroy: function () { e.Widget.prototype.destroy.call(this); this.button.remove(); this.menu.remove(); this.element.show(); return this }, isOpen: function () { return this._isOpen }, widget: function () { return this.menu }, getButton: function () { return this.button }, _setOption: function (t, n) { var r = this.menu; switch (t) { case "header": r.find("div.ui-multiselect-header")[n ? "show" : "hide"](); break; case "checkAllText": r.find("a.ui-multiselect-all span").eq(-1).text(n); break; case "uncheckAllText": r.find("a.ui-multiselect-none span").eq(-1).text(n); break; case "height": r.find("ul").last().height(parseInt(n, 10)); break; case "minWidth": this.options[t] = parseInt(n, 10); this._setButtonWidth(); this._setMenuWidth(); break; case "selectedText": case "selectedList": case "noneSelectedText": this.options[t] = n; this.update(); break; case "classes": r.add(this.button).removeClass(this.options.classes).addClass(n); break; case "multiple": r.toggleClass("ui-multiselect-single", !n), this.options.multiple = n, this.element[0].multiple = n, this.refresh() } e.Widget.prototype._setOption.apply(this, arguments) } }) })(jQuery)