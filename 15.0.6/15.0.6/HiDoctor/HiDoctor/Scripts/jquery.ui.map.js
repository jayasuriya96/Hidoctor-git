(function (t) { t.a = function (e, n, r) { t[e] = t[e] || {}; t[e][n] = function (e, t) { if (arguments.length) { this._s(e, t) } }; t[e][n].prototype = r; t.fn[n] = function (r) { var i = this, s = Array.prototype.slice.call(arguments, 1), o = typeof r === "string"; if (o && r.substring(0, 1) === "_") { return i } this.each(function () { var u = t.data(this, n); if (!u) { u = t.data(this, n, new t[e][n](r, this)) } if (o) { var l = u[r].apply(u, s); if (l != null) { i = l } } }); return i } }; t.a("ui", "gmap", { options: { mapTypeId: "roadmap", zoom: 5 }, option: function (e, t) { if (t) { this.options[e] = t; this.get("map").setOptions(this.options) } return this.options[e] }, _s: function (e, n) { this.el = t(n); jQuery.extend(this.options, e); this.options.center = this._latLng(this.options.center); this._create(); if (this._init) { this._init() } }, _create: function () { var e = this; e._a = { map: new google.maps.Map(e.el[0], e.options), markers: [], overlays: [], services: [], iw: new google.maps.InfoWindow }; google.maps.event.addListenerOnce(e._a.map, "bounds_changed", function () { e.el.trigger("init", e._a.map) }); e._call(e.options.callback, e._a.map) }, addBounds: function (e) { this.get("bounds", new google.maps.LatLngBounds).extend(this._latLng(e)); this.get("map").fitBounds(this.get("bounds")) }, inViewport: function (e) { var t = this.get("map").getBounds(); return t ? t.contains(e.getPosition()) : false }, addControl: function (e, t) { this.get("map").controls[t].push(this._unwrap(e)) }, addMarker: function (e, n, r) { e.map = this.get("map"); e.position = this._latLng(e.position); var i = new (r || google.maps.Marker)(e); var s = this.get("markers"); if (i.id) { s[i.id] = i } else { s.push(i) } if (i.bounds) { this.addBounds(i.getPosition()) } this._call(n, e.map, i); return t(i) }, clear: function (e) { this._c(this.get(e)); this.set(e, []) }, _c: function (e) { for (b in e) { if (e.hasOwnProperty(b)) { if (e[b] instanceof google.maps.MVCObject) { google.maps.event.clearInstanceListeners(e[b]); e[b].setMap(null) } else if (e[b] instanceof Array) { this._c(e[b]) } e[b] = null } } }, find: function (t, n, r) { var i = this.get(t); for (e in i) { if (i.hasOwnProperty(e)) { r(i[e], n.delimiter && i[e][n.property] ? i[e][n.property].split(n.delimiter).indexOf(n.value) > -1 : i[e][n.property] === n.value) } } }, get: function (e, t) { var n = this._a; if (!n[e]) { if (e.indexOf(">") > -1) { var r = e.replace(/ /g, "").split(">"); for (var i = 0; i < r.length; i++) { if (!n[r[i]]) { if (t) { n[r[i]] = i + 1 < r.length ? [] : t } else { return null } } n = n[r[i]] } return n } else if (t && !n[e]) { this.set(e, t) } } return n[e] }, openInfoWindow: function (e, t) { this.get("iw").setOptions(e); this.get("iw").open(this.get("map"), this._unwrap(t)) }, set: function (e, t) { this._a[e] = t }, refresh: function (e) { var n = this.get("map"); var r = n.getCenter(); t(n).triggerEvent("resize"); n.setCenter(r) }, destroy: function () { this.clear("markers"); this.clear("services"); this.clear("overlays"); for (b in this._a) { this._a[b] = null } }, _call: function (e) { if (e && t.isFunction(e)) { e.apply(this, Array.prototype.slice.call(arguments, 1)) } }, _latLng: function (e) { if (!e) { return new google.maps.LatLng(0, 0) } if (e instanceof google.maps.LatLng) { return e } else { var t = e.replace(/ /g, "").split(","); return new google.maps.LatLng(t[0], t[1]) } }, _unwrap: function (e) { if (!e) { return null } else if (e instanceof jQuery) { return e[0] } else if (e instanceof Object) { return e } return t("#" + e)[0] } }); jQuery.fn.extend({ click: function (e, t) { return this.addEventListener("click", e, t) }, rightclick: function (e) { return this.addEventListener("rightclick", e) }, dblclick: function (e, t) { return this.addEventListener("dblclick", e, t) }, mouseover: function (e, t) { return this.addEventListener("mouseover", e, t) }, mouseout: function (e, t) { return this.addEventListener("mouseout", e, t) }, drag: function (e) { return this.addEventListener("drag", e) }, dragend: function (e) { return this.addEventListener("dragend", e) }, triggerEvent: function (e) { google.maps.event.trigger(this[0], e) }, addEventListener: function (e, t, n) { if (google.maps && this[0] instanceof google.maps.MVCObject) { google.maps.event.addListener(this[0], e, t) } else { if (n) { this.bind(e, t, n) } else { this.bind(e, t) } } return this } }) })(jQuery)