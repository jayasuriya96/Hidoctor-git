(function (e) { e.msgbox = function (t) { if (typeof t == "string") { var n = t; t = { content: n } } t = t || {}; t.width = (t.width || 360) > e("body").width() ? e("body").width() : t.width || 360; t.height = (t.height || 180) > e("body").height() ? e("body").height() : t.height || 180; t.title = t.title || "Information"; t.content = t.content || "Thanks for using jquery.msgbox"; t.bgOpacity = t.bgOpacity || .6; t.cache = typeof t.cache == "undefined" ? false : t.cache; t.pluginsOn = t.pluginsOn || []; t.pluginsOff = t.pluginsOff || []; this.opts = t; this._hook_options(); this.background = e("<div />").css({ position: "fixed", width: e(window).width() + "px", height: e(window).height() + "px", "z-index": 99, opacity: this.opts.bgOpacity, top: 0, left: 0, display: "none" }).appendTo("body").addClass("jMsgbox-background"); this.mainWrap = e("<div />").css({ width: this.opts.width + "px", position: "fixed", "z-index": 100, display: "none", left: (e(window).width() - this.opts.width) / 2 + "px", top: (e(window).height() - this.opts.height) / 2 + "px" }).appendTo("body").addClass("jMsgbox-mainWrap"); this.headWrap = e("<div />").appendTo(this.mainWrap).addClass("jMsgbox-headWrap"); this.titleWrap = e("<div />").css({ "float": "left", width: this.opts.width - 50 + "px" }).html(this.opts.title).appendTo(this.headWrap).addClass("jMsgbox-titleWrap"); var r = this; this.closeWrap = e("<div />").css({ "text-align": "right" }).append('<a href="javascript:;">×</a>').appendTo(this.headWrap).find("a").click(function () { r.close() }).addClass("jMsgbox-closeWrap"); this.contentWrapWrap = e("<div />").css({ display: "block", width: this.opts.width + "px", height: this.opts.height - 24 + "px", overflow: "auto" }).appendTo(this.mainWrap); this.contentWrap = e("<div />").appendTo(this.contentWrapWrap).html(this.opts.content).addClass("jMsgbox-contentWrap"); this._hook_domready(); return this }; e.msgbox.prototype = { show: function () { this.background.show(); this.mainWrap.show(); return this }, close: function () { if (this.opts.cache) { this.background.hide(); this.mainWrap.hide() } else { this.remove() } return this }, remove: function () { this.background.remove(); this.mainWrap.remove(); return this }, _hook_options: function () { for (var t in e.msgbox) if (this.is_active(t) && e.msgbox[t].options) e.msgbox[t].options.apply(this, arguments) }, _hook_domready: function () { for (var t in e.msgbox) if (this.is_active(t) && e.msgbox[t].domready) e.msgbox[t].domready.apply(this, arguments) }, extend: function (t, n) { if (e.isFunction(this[t]) && !/^_|^extend$|^is_active$/.test(t)) { var r = this[t]; this[t] = function () { n.call(this, r); return this } } else { if (typeof this.opts[t] == "undefined") this.opts[t] = n } return this }, is_active: function (t) { return !e.msgbox[t] || e.inArray(t, this.opts.pluginsOn) > -1 || e.inArray(t, this.opts.pluginsOff) < 0 && (typeof e.msgbox[t].active == "undefined" || e.msgbox[t].active) } }; e.msgbox.dragndrop = { options: function () { this.extend("allowDrag", true) }, domready: function () { var t = this; if (this.opts.allowDrag) { this.mainWrap.Drags({ handler: this.titleWrap, range: "window", onDrop: function () { t.mainWrap.css("position", "fixed"); t.relTop = t.mainWrap.offset().top - e(window).scrollTop(); t.relLeft = t.mainWrap.offset().left - e(window).scrollLeft() } }) } } }; e.msgbox.resetposition = { domready: function () { var t = this; var n = function () { t.background.css({ width: e(window).width() + "px", height: e(window).height() + "px", top: 0, left: 0 }); if (t.relTop) { t.mainWrap.css({ top: t.relTop + "px", left: t.relLeft + "px" }) } }; n(); e(window).load(n).resize(n).scroll(n) } }; e.msgbox.closeicon = { options: function () { this.extend("closeIcon", "×"); if (!/^text:|^image:/.test(this.opts.closeIcon)) this.opts.closeIcon = "text:" + this.opts.closeIcon }, domready: function () { if (/^text:/.test(this.opts.closeIcon)) { this.closeWrap.html(this.opts.closeIcon.substr(5)) } else { this.closeWrap.html('<img src="' + this.opts.closeIcon.substr(6) + '" />') } } }; e.msgbox.onclose = { options: function () { this.extend("onClose", function () { }) }, domready: function () { this.extend("close", function (e) { e.call(this); this.opts.onClose.apply(this, arguments) }) } }; e.msgbox.autoclose = { options: function () { this.extend("autoClose", 0) }, domready: function () { var t = this; this.closeMsg = "&nbsp; &nbsp; Closing in <strong>{seconds}</strong>s"; var n = null; var r = function (r) { t.titleWrap.append(t.closeMsg.replace("{seconds}", r)); n = setInterval(function () { if (r == 1) { t.close() } else { r--; e("strong", t.titleWrap).text(r) } }, 1e3) }; this.extend("close", function (e) { e.call(this); clearInterval(n) }); this.startAutoClose = function (e) { if (e > 0) r.call(t, e); return t }; this.endAutoClose = function () { t.titleWrap.html(this.opts.title); clearInterval(n); return t }; this.startAutoClose(this.opts.autoClose) } }; e.msgbox.animate = { options: function () { this.extend("anim", 0) }, domready: function () { var e = this; this.extend("show", function (t) { this.background.show(); switch (this.opts.anim) { case 0: e.mainWrap.show().css({ top: e.mainWrap.offset().top - 40 + "px", opacity: .3 }).animate({ top: e.mainWrap.offset().top + 40 + "px", opacity: 1 }, function () { e.startLoading = true; t.call(e) }); break; case 1: e.mainWrap.show().css({ left: e.mainWrap.offset().left - 80 + "px", opacity: .3 }).animate({ left: e.mainWrap.offset().left + 80 + "px", opacity: 1 }, function () { e.startLoading = true; t.call(e) }); break; case 2: e.mainWrap.show().css({ left: e.mainWrap.offset().left + 80 + "px", opacity: .3 }).animate({ left: e.mainWrap.offset().left - 80 + "px", opacity: 1 }, function () { e.startLoading = true; t.call(e) }); break; default: t.call(e); break } }); this.extend("close", function (t) { switch (this.opts.anim) { case 0: this.mainWrap.animate({ top: this.mainWrap.offset().top - 40 + "px", opacity: 0 }, function () { t.call(e) }); break; case 1: this.mainWrap.animate({ left: this.mainWrap.offset().left - 80 + "px", opacity: 0 }, function () { t.call(e) }); break; case 2: this.mainWrap.animate({ left: this.mainWrap.offset().left + 80 + "px", opacity: 0 }, function () { t.call(e) }); break; default: t.call(e); break } }) } }; e.msgbox.fixdimen = { domready: function () { this.extend("show", function (e) { e.apply(this, arguments); var t = this; var n = setInterval(function () { if (t.closeWrap.outerWidth(true) > 0) { clearInterval(n); t.titleWrap.width(t.opts.width - t.closeWrap.outerWidth(true) - parseInt(t.headWrap.css("padding-left")) - parseInt(t.headWrap.css("padding-right")) - parseInt(t.headWrap.css("border-right-width")) - parseInt(t.headWrap.css("border-left-width")) - parseInt(t.headWrap.css("margin-left")) - parseInt(t.headWrap.css("margin-right")) - 5) } }, 200); this.contentWrapWrap.height(this.opts.height - this.headWrap.outerHeight(true)) }) } }; e.msgbox.contenttype = { options: function () { this.extend("type", "text"); this.extend("onAjaxed", function () { }) }, domready: function () { var t = this; switch (this.opts.type) { case "alert": var n = e('<input type="button" value=" OK " />').click(function () { t.close() }); var r = e("<center />").css("padding", "8px").append(n); this.mainWrap.append(r); t.extend("show", function (e) { e.apply(this, arguments); t.contentWrapWrap.height(this.opts.height - this.headWrap.outerHeight(true) - r.outerHeight(true)) }); break; case "confirm": t.contentWrapWrap.height(parseInt(t.contentWrapWrap.css("height")) - 40); this.setValue = function (e) { t.value = e; return t }; this.getValue = function () { return t.value }; var i = e('<input type="button" value=" Yes " />').click(function () { t.setValue(true); t.close() }); var s = e('<input type="button" value=" No " />').click(function () { t.setValue(false); t.close() }); var r = e("<center />").css("padding", "8px").append(i).append("&nbsp;").append(s); this.mainWrap.append(r); t.extend("show", function (e) { e.apply(this, arguments); t.contentWrapWrap.height(this.opts.height - this.headWrap.outerHeight(true) - r.outerHeight(true)) }); break; case "input": t.contentWrapWrap.height(parseInt(t.contentWrapWrap.css("height")) - 40); this.setValue = function (e) { t.value = e; return t }; this.getValue = function () { return t.value }; var o = e('<input type="text" />'); var u = e('<input type="button" value=" OK " />').click(function () { t.setValue(o.val()); t.close() }); var a = e("<div />").css("padding", "8px").append(o).append("&nbsp;").append(u); this.mainWrap.append(a); t.extend("show", function (e) { e.apply(this, arguments); t.contentWrapWrap.height(this.opts.height - this.headWrap.outerHeight(true) - a.outerHeight(true)) }); break; case "ajax": case "url": t.contentWrap.text("Loading ..."); if (!t.is_active("animate")) t.startLoading = true; var f = setInterval(function () { if (t.startLoading) { clearInterval(f); t.contentWrap.load(t.opts.content, function () { t.opts.onAjaxed.apply(t, arguments) }) } }, 200); break; case "iframe": this.contentWrap.css("padding", 0).empty(); if (!t.is_active("animate")) t.startLoading = true; var f = setInterval(function () { if (t.startLoading) { clearInterval(f); e('<iframe border="0" frameborder="0" marginheight="0" marginwidth="0" scrolling="auto"></iframe>').appendTo(t.contentWrap).css({ height: "100%", width: "100%" }).attr({ width: "100%", height: "100%", src: t.opts.content }) } }, 200); break; default: break } } }; e.msgbox.flashtitle = { domready: function () { var e = this; var t = null; var n = function (r, i, s, o) { if (i > 0) { o = !o; op = o ? r : 1; this.headWrap.css("opacity", op); t = setTimeout(function () { n.call(e, r, i - 1, s, o) }, s) } else clearTimeout(t) }; this.background.click(function () { n.call(e, .5, 4, 80) }) } }; e.msgbox.bgdblclick2close = { domready: function () { var e = this; this.background.dblclick(function () { e.close() }) } }; e.msgbox.showclose = { options: function () { this.extend("showClose", true) }, domready: function () { var e = this; this.setShowClose = function (t) { if (t) { e.closeWrap.css("visibility", "visible"); if (e.is_active("bgdblclick2close")) { e.background.unbind("dblclick"); e.background.dblclick(function () { e.close() }) } } else { e.closeWrap.css("visibility", "hidden"); e.background.unbind("dblclick") } return e }; this.setShowClose(this.opts.showClose) } } })(jQuery)