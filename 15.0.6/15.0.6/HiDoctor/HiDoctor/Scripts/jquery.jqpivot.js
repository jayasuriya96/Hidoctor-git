(function (e, t, n) { "use strict"; e.extend({ jqpivot: new function () { function r(t, i) { if (e.isArray(t) || t === n) return i(t); if (e.isPlainObject(t)) { for (var s in t) if (e.isArray(t[s])) return i(t[s]); return i(n) } if (e.isFunction(t)) return r(t(), i); e.ajax({ url: t + "", dataType: "json", success: function (e, t, n) { r(e, i) }, error: function (e, t, r) { i(n) } }) } function i(e) { var t = e[0], n = {}, r, i; for (r in t) { i = typeof t[r]; n[r] = { type: i === "boolean" || i === "number" || i === "string" ? i : "unknown", filter: {} } } return n } function s(t, r) { var i = {}, s, o, u = [], a = [], f = [], l = []; for (s = 0, o = t.columns.length; s < o; s++) { if (t.dimensions.hasOwnProperty(t.columns[s]) && !i.hasOwnProperty(t.columns[s])) { u.push(t.columns[s]); i[t.columns[s]] = 1 } } for (s = 0, o = t.rows.length; s < o; s++) { if (t.dimensions.hasOwnProperty(t.rows[s]) && !i.hasOwnProperty(t.rows[s])) { a.push(t.rows[s]); i[t.rows[s]] = 1 } } for (s = 0, o = t.facts.length; s < o; s++) if (t.facts[s].by && t.dimensions.hasOwnProperty(t.facts[s].by)) f.push({ by: t.facts[s].by, func: t.facts[s].func || r.defaultFunc }); for (s in t.dimensions) l.push(s); if (e.isFunction(r.sorter)) l.sort(r.sorter); else l.sort(); for (s = 0, o = l.length; s < o; s++) if (t.dimensions[l[s]].sortIndex === n) t.dimensions[l[s]].sortIndex = (s + 1) * 5; return { dimensions: t.dimensions, columns: u, rows: a, facts: f } } function o(t) { var n, r = []; for (n in t) r.push(e.extend({ name: n }, t[n])); return r.sort(function (e, t) { return e.sortIndex - t.sortIndex }) } function u(e, t) { var r, i, s, o = [], u = []; for (r in t) if (e[r] === n || e[r] === null) o[t[r].sortIndex] = ""; else o[t[r].sortIndex] = e[r]; for (i = 0, s = o.length; i < s; i++) if (i in o) u.push(o[i]); return u } function a(t) { if (t === n) return; var r = t.filter, i = t.type; if (r && r.value !== n) switch (i) { case "number": if (e.isArray(r.value)) { r.value[0] = +r.value[0]; r.value[1] = +r.value[1]; if (isNaN(r.value[0])) r.value[0] = n; if (isNaN(r.value[1])) r.value[1] = n; if (r.value[0] === n && r.value[1] === n) r.value = n } else { r.value = +r.value; if (isNaN(r.value)) r.value = n } break; case "date": if (e.isArray(r.value)) { if (isNaN(Date.parse(r.value[0]))) r.value[0] = n; if (isNaN(Date.parse(r.value[1]))) r.value[1] = n } else { if (isNaN(Date.parse(r.value))) r.value = n } break; case "boolean": r.value = !!r.value; break; default: r.value = "" + r.value } } function f(t) { a(t); if (t === n) return; var r = t.filter; if (r === n) t.filter = {}; if (!r || r.value === n && e.isEmptyObject(r._exact)) return; return r } function l(t, r) { var i = f(t), s = t.type, o, u, a, l; if (i && i.value !== n) { switch (s) { case "number": case "date": if (e.isArray(i.value)) { u = i.value[0]; a = i.value[1] } else l = i.value; if (r === "gt") o = u; else if (r === "lt") o = a; else o = l; break; default: o = i.value } } if (o === n) o = ""; switch (s) { case "number": return ['<input class="jqpivot-numberfilter" id="jqpivot-numberfilter-', r, '" name="', r, '" value="', o, '" />'].join(""); case "date": return ['<input class="jqpivot-datefilter" id="jqpivot-datefilter-', r, '" name="', r, '" value="', o, '" />'].join(""); case "boolean": return ['<input type="radio" class="jqpivot-booleanfilter" id="jqpivot-booleanfilter-', r, '" name="boolean" value="', r, '" ', "" + o === r ? 'checked="checked"' : "", " />"].join(""); default: return ['<input class="jqpivot-stringfilter" autofocus="autofocus" name="string" value="', o, '" />'].join("") } } function c(e, t, n) { var r = {}; for (var i = n.length; i--;) if (n[i][t] || n[i][t] === 0) r[n[i][t]] = 1; e.filter._all = r } function h(t, r, i) { if (!t.filter._all) c(t, r, i); if (t.filter._exact === n) t.filter._exact = {}; var s = e("<table />"), o; for (var u in t.filter._all) { o = "jqpivot-checkboxfilter-" + u.replace(/\s/g, "_"); s.append(e("<tr />").append([e("<td />").append(e("<input />", { type: "checkbox", id: o, value: u, checked: u in t.filter._exact })), e("<td />").append(e("<label />", { "for": o, html: u }))])) } return s } function p(t, r) { function i(t, r, i) { if (!i) return true; if (i.value === n && i._exact !== n && !e.isEmptyObject(i._exact)) return false; if (i.value === n) return true; switch (r) { case "number": if (isNaN(+t)) return false; if (e.isArray(i.value)) { if (i.value[0] !== n && +t < i.value[0]) return false; if (i.value[1] !== n && +t > i.value[1]) return false } else { if (+t !== i.value) return false } break; case "date": if (isNaN(Date.parse(t))) return false; var s, o = new Date(t); o.setHours(0, 0, 0, 0); if (e.isArray(i.value)) { if (i.value[0] !== n) { s = new Date(i.value[0]); s.setHours(0, 0, 0, 0); if (o.getTime() < s.getTime()) return false } if (i.value[1] !== n) { s = new Date(i.value[1]); s.setHours(0, 0, 0, 0); if (o.getTime() > s.getTime()) return false } } else { s = new Date(i.value); s.setHours(0, 0, 0, 0); if (o.getTime() !== s.getTime()) return false } break; case "boolean": if (!!t !== i.value) return false; break; default: if ((t + "").toLowerCase().indexOf(i.value.toLowerCase()) === -1) return false } return true } for (var s in t) { if (r[s] === n) continue; if (r[s].filter._exact !== n && t[s] in r[s].filter._exact) continue; if (!i(t[s], r[s].type, r[s].filter)) return false } return true } function d(r) { function d() { r.find("> table.jqpivot-details").remove(); r.find(".jqpivot-td-details").removeClass("jqpivot-td-details"); var t = e(this), n = t.data("data"); if (!n || !e.isArray(n) || n.length === 0) return; var s = e('<table class="jqpivot-details" />'), a = e("<tr />"), f = i.d.dimensions, l = o(f), c, h, p, d; for (h = 0, p = l.length; h < p; h++) a.append(e("<th />", { text: l[h].name })); s.append(e("<thead />").append(a)); for (h = 0, p = n.length; h < p; h++) { a = e("<tr />"); c = u(n[h], f); for (d = 0; d < c.length; d++) a.append(e("<td />", { "class": "jqpivot-td-type-" + l[d].type, html: c[d] })); s.append(a) } r.append(s); t.addClass("jqpivot-td-details"); if (e().stickyTableHeaders) s.stickyTableHeaders() } var i = r.data("jqpivot"), s = r.find(".jqpivot-table"), a = s.children("table"), f = e('<div class="jqpivot-calculating"><span>calculating</span></div>'); if (a.length !== 0) { var l = a.position(), c = a.outerHeight(), h = a.outerWidth(); f.addClass("jqpivot-calculating-table").css({ top: l.top, left: l.left, width: h, height: c, "line-height": c + "px" }) } s.append(f); r.find("> table.jqpivot-details").remove(); r.find(".jqpivot-td-details").removeClass("jqpivot-td-details"); t.setTimeout(function () { function L(e) { if (e in u) return u[e]; for (var t = 0; t < o.length; t++) if (o[t].by + " (" + o[t].func + ")" === e) { u[e] = t; return t } u[e] = -1; return -1 } var t = e("<table />"), o = i.d.facts, u = {}, f = i.d.columns, l = i.d.rows, c = i.d.dimensions, h = f.concat(l), v = f.length, m = l.length, g = o.length, y = [], b = [], w = {}, E, S, x, T, N, C, k; if (h.length === 0) { t.append('<tr><td class="jqpivot-td-empty">Columns and Rows dimensions are empty</td></tr>') } else if (g === 0) { t.append('<tr><td class="jqpivot-td-empty">Data dimensions are empty</td></tr>') } else { for (N = i.data.length; N--;) { T = i.data[N]; if (!p(T, c)) continue; x = w; for (C = 0; C < h.length; C++) { E = h[C]; S = T[E]; if (S === n || S === null || S === "") S = "-"; if (!x.hasOwnProperty(S)) x[S] = C + 1 === h.length ? [] : {}; x = x[S] } x.push(T) } w.__getByPath = function (t, n) { var r = t.slice(0), i, s = true, o = this; while (r.length) { i = r.shift(); if (o.hasOwnProperty(i)) { o = o[i] } else { s = false; break } } if (e.isArray(o)) { n.arr = o; if (!s) { n.i = L(i); return o.facts[i] } else { for (i in o.facts) { n.i = L(i); return o.facts[i] } } } }; (function () { function t(e) { if (v > 0) y.push(e.slice(0, v)); if (m + g > 0) b.push(e.slice(v, m > 0 && g === 1 ? -1 : e.length)) } function n(e, t) { if (e.length !== t.length) return false; for (var n = e.length; n--;) if (e[n] !== t[n]) return false; return true } function i(e) { var t = [], r, i, s; for (r = 0; r < e.length; r++) { s = true; for (i = 0; i < t.length; i++) if (n(e[r], t[i])) { s = false; break } if (s) t.push(e[r]) } return t } function s() { y = i(y); b = i(b) } function u(n, i) { var s, a, f, l, c; for (s in n) { c = i.concat(s); if (!e.isArray(n[s])) { u(n[s], c) } else { n[s].facts = {}; for (a = 0; a < o.length; a++) { f = o[a].by; l = o[a].func; t(c.concat(f + " (" + l + ")")); if (e.isFunction(e.jqpivot.functions[l])) n[s].facts[f + " (" + l + ")"] = e.jqpivot.functions[l].call(r, n[s], f) } } } } u(w, []); s() })(); (function () { function e(e, t) { return function (n, r) { if (t === "number") { n = +n; r = +r } return n > r ? e : n < r ? -e : 0 } } var t, n = []; for (t = 0; t < f.length; t++) n.push(e(c[f[t]].sort === "desc" ? -1 : +1, c[f[t]].type)); y.sort(function (e, t) { var r, i, s = Math.min(e.length, n.length); for (r = 0; r < s; r++) { i = n[r](e[r], t[r]); if (i !== 0) return i } return 0 }); n.length = 0; for (t = 0; t < l.length; t++) n.push(e(c[l[t]].sort === "desc" ? -1 : +1, c[l[t]].type)); if (l.length < b[0].length) n.push(function (e, t) { return L(e) - L(t) }); b.sort(function (e, t) { var r, i, s = Math.min(e.length, n.length); for (r = 0; r < s; r++) { i = n[r](e[r], t[r]); if (i !== 0) return i } return 0 }) })(); var A, O = e("<thead />"); for (C = 0; C < (y.length === 0 ? 1 : y[0].length) ; C++) { A = e("<tr />"); for (k = 0; k < b[0].length; k++) A.append(e("<th />", { "class": "jqpivot-td-empty " + (k + 1 === b[0].length ? "jqpivot-td-rheader-right" : "") })); for (N = 0; N < y.length; N++) A.append(e("<th />", { "class": "jqpivot-td-bold jqpivot-td-cheader jqpivot-td-header", text: y[N][C] })); if (y.length === 0 || C + 1 === y[0].length) A.append('<th class="jqpivot-td-empty jqpivot-td-bold jqpivot-td-cheader jqpivot-td-total">total</td>'); else A.append('<th class="jqpivot-td-empty" />'); O.append(A) } A.find("> th").addClass("jqpivot-td-cheader-bottom"); t.append(O); var M = [], _ = [], D; for (C = 0; C < b.length; C++) { A = e("<tr />"); for (k = 0; k < b[0].length; k++) A.append(e("<td />", { "class": "jqpivot-td-bold jqpivot-td-rheader jqpivot-td-header " + (k + 1 === b[0].length ? "jqpivot-td-rheader-right" : ""), text: b[C][k] })); for (N = 0; N < (y.length || 1) ; N++) { var P = {}, H = w.__getByPath(y.length > 0 ? y[N].concat(b[C]) : b[C], P); if (!i.config.showZeros && (H === 0 || H === null || H === n || H === "")) { H = ""; if (P.arr) P.arr = [] } A.append(e("<td />", { "class": "jqpivot-td-data " + (y.length > 0 ? "" : "jqpivot-td-bold jqpivot-td-cheader jqpivot-td-total") + (N % 3 === 2 ? " jqpivot-td-coleven" : "") + (C % 2 === 1 ? " jqpivot-td-roweven" : ""), text: H, click: d }).data("data", P.arr)); if (H === 0 || H === null || H === n || H === "") H = 0; if (!M[N]) M[N] = []; if (P.i !== n) { D = P.i; M[N][D] = M[N][D] ? { val: H + M[N][D].val, arr: P.arr ? M[N][D].arr ? M[N][D].arr.concat(P.arr) : P.arr : M[N][D].arr } : { val: H, arr: P.arr } } _[C] = _[C] ? { val: H + _[C].val, arr: P.arr ? _[C].arr ? _[C].arr.concat(P.arr) : P.arr : _[C].arr } : { val: H, arr: P.arr } } if (!M[N]) M[N] = []; if (D !== n) M[N][D] = M[N][D] ? { val: _[C].val + M[N][D].val, arr: _[C].arr ? M[N][D].arr ? M[N][D].arr.concat(_[C].arr) : _[C].arr : M[N][D].arr } : { val: _[C].val, arr: _[C].arr }; if (y.length > 0) A.append(e("<td />", { "class": "jqpivot-td-data jqpivot-td-bold jqpivot-td-cheader jqpivot-td-total" + (C % 2 === 1 ? " jqpivot-td-roweven" : ""), text: _[C].val, click: d }).data("data", _[C].arr)); t.append(A) } for (C = 0; C < o.length; C++) { A = e("<tr />"); for (k = 0; k < b[0].length - 1; k++) A.append('<td class="jqpivot-td-empty" />'); A.append(e("<td />", { "class": "jqpivot-td-empty jqpivot-td-bold jqpivot-td-rheader jqpivot-td-total jqpivot-td-rheader-right", text: o.length === 1 ? "total" : o[C].by + " (" + o[C].func + ")" })); for (N = 0; N < y.length + 1; N++) A.append(e("<td />", { "class": "jqpivot-td-data jqpivot-td-bold jqpivot-td-rheader jqpivot-td-total " + (N === y.length ? "jqpivot-td-cheader" : "") + (N % 3 === 2 ? " jqpivot-td-coleven" : ""), text: M[N][C] ? M[N][C].val : "0", click: d }).data("data", M[N][C] ? M[N][C].arr : n)); if (C === 0) A.find("> td.jqpivot-td-bold").addClass("jqpivot-td-rheader-top"); t.append(A) } var B = t[0], j = B.rows, F, I, q, R, U, z; for (C = 0; C < (y.length === 0 ? 1 : y[0].length) ; C++) { F = j[C].cells; R = n; z = 1; for (N = 0, k = F.length; N < k; N++) { I = e(F[N]); if (R !== I.text()) { q = I; R = I.text(); z = 1 } else { z++; q.data("colspan", z); I.data("todelete", true) } } } for (N = 0, k = b[0].length; N < k; N++) { R = n; U = 1; for (C = 0; C < b.length; C++) { F = j[C + (y.length === 0 ? 1 : y[0].length)].cells; I = e(F[N]); if (R !== I.text()) { q = I; R = I.text(); U = 1 } else { U++; q.data("rowspan", U); I.data("todelete", true) } } } t.find(".jqpivot-td-bold").each(function () { var t = e(this), n = t.data(), r = n.rowspan, i = n.colspan, s = n.todelete; if (r) t.attr("rowspan", r); else if (i) t.attr("colspan", i); else if (s) t.remove() }) } s.find(".jqpivot-calculating").remove(); if (a.length !== 0) a.replaceWith(t); else s.append(t); if (e().stickyTableHeaders) t.stickyTableHeaders() }, 100) } function v(r, i, s) { function u(t, n) { return e("<div />", { "class": "jqpivot-d", "data-name": t }).append(e("<span/>", { text: t })).data("func", n) } function k(t) { var i = r.data("jqpivot"), t = t || (i ? i.d : n); S.find(".jqpivot-d").each(function () { var t = e(this), r = t.data("name"), i = t.data("func"); if (r === n) return; t.find("> span").find(".jqpivot-menu").remove().end().append(e("<span />", { "class": "jqpivot-menu", text: i })) }); E.find(".jqpivot-d").each(function () { var r = e(this), i = r.data("name"); if (i === n) return; r.find("> span").find(".jqpivot-menu").remove().end().append(e("<span />", { "class": "jqpivot-menu", html: "&#9660;" }).addClass(t && f(t.dimensions[i]) ? "jqpivot-menu-changed" : n)) }); x.add(T).find(".jqpivot-d").each(function () { var r = e(this), i = r.data("name"); if (i === n) return; r.find("> span").find(".jqpivot-menu").remove().end().append(e("<span />", { "class": "jqpivot-menu", html: t && t.dimensions[i].sort === "desc" ? "&darr;" : "&uarr;" })) }) } function L() { r.find(".jqpivot-d > div").remove(); E.find(".jqpivot-d .jqpivot-menu").html("&#9660;") } function A(e) { var t = 0, n, r = x.sortable("toArray", { attribute: "data-name" }), i = T.sortable("toArray", { attribute: "data-name" }); for (n = r.length; n--;) if (r[n] === e) t++; for (n = i.length; n--;) if (i[n] === e) t++; return t <= 1 } function O(e, t) { if (e.length !== t.length) return false; if (e.length === 0) return true; var n = e[0].by; for (var r = e.length; r--;) if (!n && e[r] !== t[r] || n && n !== t[r]) return false; return true } function M(e, t) { L() } function _(t, n) { if (e(this).has(n.item).length > 0) if (!A(n.item.data("name"))) n.item.remove() } function D(e, t) { if (t.sender.is(".jqpivot-data")) if (!A(t.item.data("name"))) t.sender.sortable("cancel") } function P(i, o) { t.clearTimeout(N); N = t.setTimeout(function () { var t = r.data("jqpivot"), i = t.d, o = function (e) { return e !== "" }, u = S.sortable("toArray", { attribute: "data-name" }).filter(o), a = x.sortable("toArray", { attribute: "data-name" }).filter(o), f = T.sortable("toArray", { attribute: "data-name" }).filter(o), l = false; if (!O(i.columns, a)) { l = true; i.columns = a } if (!O(i.rows, f)) { l = true; i.rows = f } if (!O(i.facts, u)) { l = true; var c = []; S.find(".jqpivot-d").each(function () { var t = e(this), r = t.data("name"), i = t.data("func"); if (r === n) return; if (i === n) t.data("func", s.defaultFunc); c.push({ by: r, func: i || s.defaultFunc }) }); i.facts = c } if (l) { k(i); d(r) } }, 200) } function H() { var t = r.data("jqpivot"), i = t.d, o = e(this).data(), u = []; L(); if (o.el.data("func") === o.name) return; o.el.data("func", o.name); S.find(".jqpivot-d").each(function () { var t = e(this), r = t.data("name"), i = t.data("func"); if (r === n) return; if (i === n) t.data("func", s.defaultFunc); u.push({ by: r, func: i || s.defaultFunc }) }); i.facts = u; k(); d(r) } r.empty(); var a = e("<table />", { "class": "jqpivot-wrapper" }), c = e("<td />", { "class": "jqpivot-dimensions", align: "right" }), p = e("<td />", { "class": "jqpivot-columns" }), v = e("<td />", { "class": "jqpivot-rows", align: "right" }), m = e("<td />", { "class": "jqpivot-table" }), g = e("<div />", { "class": "jqpivot-data ui-helper-clearfix" }), y, b, w, E = c, S = g, x = p, T = v, N; var C = o(i.dimensions); for (y = 0, b = C.length; y < b; y++) c.append(u(C[y].name)); for (y = 0, b = i.columns.length; y < b; y++) p.append(u(i.columns[y])); for (y = 0, b = i.rows.length; y < b; y++) v.append(u(i.rows[y])); for (y = 0, b = i.facts.length; y < b; y++) if (i.facts[y].by) g.append(u(i.facts[y].by, i.facts[y].func || s.defaultFunc)); r.append(a.append(e("<tr />").append(c).append(p.append(e('<div class="jqpivot-floatfix" />')))).append(e("<tr />").append(v).append(m.append(g.append(e('<div class="jqpivot-floatfix" />'))).append(e('<div style="clear: left" />'))))); k(i); S.sortable({ appendTo: r, cursor: "move", handle: "> span", tolerance: "pointer", start: M, update: P, connectWith: ".jqpivot-columns, .jqpivot-rows" }); x.sortable({ appendTo: r, cursor: "move", handle: "> span", tolerance: "pointer", start: M, stop: _, receive: D, update: P, connectWith: ".jqpivot-rows, .jqpivot-data" }); T.sortable({ appendTo: r, cursor: "move", handle: "> span", tolerance: "pointer", start: M, stop: _, receive: D, update: P, helper: function (e, t) { var n = t.width(); return t.clone().css({ width: n, "text-align": "right" }) }, connectWith: ".jqpivot-columns, .jqpivot-data" }); r.find(".jqpivot-dimensions > div").draggable({ appendTo: r, cursor: "move", handle: "> span", tolerance: "pointer", start: M, helper: function () { var t = e(this), n = t.width(); return e(this).clone().css({ width: n, "text-align": "right" }) }, connectToSortable: ".jqpivot-columns, .jqpivot-rows, .jqpivot-data" }); r.find(".jqpivot-dimensions").droppable({ accept: ".jqpivot-d:not(.jqpivot-dimensions > div)", hoverClass: "jqpivot-trash", tolerance: "pointer", over: function (t, n) { e(".jqpivot-d.ui-sortable-placeholder").hide() }, out: function (t, n) { e(".jqpivot-d.ui-sortable-placeholder").show() }, drop: function (e, t) { t.draggable.remove() } }); r.on("click.jqpivot", function (t) { if (e(t.target).parents(".jqpivot-d").length === 0) L() }); r.on("click.jqpivot", ".jqpivot-menu", function () { var t = r.data("jqpivot"), i = t.d, s = e(this), o = s.parent(), u = o.children(".jqpivot-menu"), a = u.html().charCodeAt(0), f = o.parent(), c = o.outerHeight(), p = o.outerWidth(), v = o.position().left, m = f.data("name"), g = i.dimensions[m]; L(); if (a === 9650) return; if (E.has(this).length > 0) { u.html("&#9650;"); var y = e('<div class="jqpivot-submenu-border-fix" />'); var b = e("<div />", { "class": "jqpivot-submenu", append: function () { var t = e("<div />"), n = g.type, r = g.filter, i = true; switch (n) { case "number": t.append(["<table>", "<tr>", '<td><label for="jqpivot-numberfilter-gt"><b>&ge;</b></label></td>', "<td>", l(g, "gt"), "</td>", "</tr>", "<tr>", '<td><label for="jqpivot-numberfilter-lt"><b>&le;</b></label></td>', "<td>", l(g, "lt"), "</td>", "</tr>", "</table>", "<hr />", "<table>", "<tr>", '<td><label for="jqpivot-numberfilter-eq"><b>=</b></label></td>', "<td>", l(g, "eq"), "</td>", "</tr>", "</table>"].join("")); break; case "date": t.append(["<table>", "<tr>", '<td width="50"><label for="jqpivot-datefilter-gt">after</label></td>', "<td>", l(g, "gt"), "</td>", "</tr>", "<tr>", '<td width="50"><label for="jqpivot-datefilter-lt">before</label></td>', "<td>", l(g, "lt"), "</td>", "</tr>", "</table>", "<hr />", "<table>", "<tr>", '<td width="50"><label for="jqpivot-datefilter-eq">on</label></td>', "<td>", l(g, "eq"), "</td>", "</tr>", "</table>"].join("")); break; case "boolean": t.append(["<table>", "<tr>", "<td>", l(g, "true"), "</td>", '<td><label for="jqpivot-booleanfilter-true">true</label></td>', "</tr>", "<tr>", "<td>", l(g, "false"), "</td>", '<td><label for="jqpivot-booleanfilter-false">false</label></td>', "</tr>", "</table>"].join("")); i = false; break; default: t.append(l(g)) } if (i) t.append(['<div class="jqpivot-filters-allvalues">', '<div class="jqpivot-filters-header">all values</div>', '<div class="jqpivot-filters-values"></div>', "</div>"].join("")); t.append(['<div class="jqpivot-filters-buttons">', '<button value="clear">clear</button>', '<button value="set">set</button>', "</div>"].join("")); return t } }); f.append(y).append(b); var w = b.outerWidth(); y.width(Math.min(p, w) - 2).css({ top: c - 1 }); b.css({ top: c - 1, right: p <= w ? "auto" : 0, left: p <= w ? v : "auto" }).show(); b.find(".jqpivot-datefilter").datepicker({ changeMonth: true, changeYear: true }).end().find(".jqpivot-filters-header").on("click.jqpivot", function () { var n = e(this).next(".jqpivot-filters-values"), r = n.hasClass("jqpivot-filters-values-filled"); if (!r) n.append(h(g, m, t.data)).addClass("jqpivot-filters-values-filled"); n.toggle() }).end().find("button").on("click.jqpivot", function () { L(); delete g.filter.value; delete g.filter._exact; if (this.value === "set") { b.find("input").filter(":text").each(function () { var t = e(this), r = e.trim(t.val()), i = t.attr("name"); if (r !== "") switch (i) { case "gt": if (g.filter.value === n) g.filter.value = [r]; else if (e.isArray(g.filter.value)) g.filter.value[0] = r; break; case "lt": if (g.filter.value === n) g.filter.value = [n, r]; else if (e.isArray(g.filter.value)) g.filter.value[1] = r; break; case "eq": case "string": g.filter.value = r } }).end().filter(":radio:checked").each(function () { var t = e(this).val() === "true" ? true : false; g.filter.value = t }).end().filter(":checkbox:checked").each(function () { var t = e(this).val(); if (g.filter._exact === n) g.filter._exact = {}; g.filter._exact[t] = 1 }) } k(); d(r) }) } else if (S.has(this).length > 0) { var y = e('<div class="jqpivot-submenu-border-fix" />'); var b = e("<div />", { "class": "jqpivot-submenu", append: function () { var t, n, r = e("<div />"), i; for (t in e.jqpivot.functions) { n = e.jqpivot.functions[t]; i = n(); r.append(e("<div />", { "class": "jqpivot-submenu-function", html: "<span>(" + t + ")</span>" + (i ? " - " + i : ""), click: H }).data({ name: t, el: f })) } return r } }); f.append(y).append(b); var w = b.outerWidth(); y.width(Math.min(p, w) - 2).css({ top: c - 1 }); b.css({ top: c - 1, right: p <= w ? "auto" : 0, left: p <= w ? v : "auto" }).show() } else if (x.add(T).has(this).length > 0) { g.sort = g.sort === "desc" ? "asc" : "desc"; k(); d(r) } }) } function m(e) { function i(i) { var s = e.find(".jqpivot-loading > span"); if (s.length === 0 || i) { if (i) s.text("..."); return t.clearInterval(n) } var o = s.text(), u = r.indexOf(o) + 1; s.text(r[u >= r.length ? 0 : u]) } var n, r = [".", "..", "..."]; e.html('<div class="jqpivot-loading">loading data <span>...</span></div>'); i(); n = t.setInterval(i, 150); t.setTimeout(function () { i(true) }, 3e4) } this.defaults = { data: n, defaultFunc: "count", showZeros: false }; this.functions = { count: function (e, t) { if (arguments.length === 0) return "count of all values"; return e.length }, uniqcount: function (e, t) { if (arguments.length === 0) return "count of all unique values"; var n = 0, r, i, s = {}; for (i = e.length; i--;) { r = "" + e[i][t]; if (!s.hasOwnProperty(r)) { n++; s[r] = 1 } } return n }, sum: function (e, t) { if (arguments.length === 0) return "sum of all values"; var n = 0, r; for (r = e.length; r--;) n += +e[r][t]; return n }, uniqsum: function (e, t) { if (arguments.length === 0) return "sum of all unique values"; var n = 0, r, i, s = {}; for (i = e.length; i--;) { r = "" + e[i][t]; if (!s.hasOwnProperty(r)) { n += +e[i][t]; s[r] = 1 } } return n } }; var g = { init: function (t) { return this.each(function () { var o = e(this), u = o.data("jqpivot"); if (u) return; var a = e.extend({}, e.jqpivot.defaults, t); m(o); r(a.data, function (t) { if (t === n || t.length === 0 || !e.isPlainObject(t[0]) || e.isEmptyObject(t[0])) { o.html('<div class="jqpivot-error">inappropriate data</div>'); e.error("inappropriate data") } var r = s(e.extend(true, { dimensions: i(t), columns: [], rows: [], facts: [] }, { dimensions: a.dimensions, columns: a.columns, rows: a.rows, facts: a.facts }), a); o.data("jqpivot", { config: a, data: t, d: r }); v(o, r, a); d(o) }) }) }, setColumns: function () { if (arguments.length === 0) return this; var t; if (e.isArray(arguments[0])) t = arguments[0]; else t = Array.prototype.slice.call(arguments); return this.each(function () { var t = e(this), n = t.data("jqpivot"); if (!n) return }) }, destroy: function () { return this.each(function () { var t = e(this), n = t.data("jqpivot"); if (!n) return; t.removeData("jqpivot"); t.empty() }) } }; this.construct = function (t) { if (g[t]) return g[t].apply(this, Array.prototype.slice.call(arguments, 1)); if (typeof t === "object" || !t) return g.init.apply(this, arguments); e.error('there is no method "' + t + '"') } } }); e.fn.extend({ jqpivot: e.jqpivot.construct }) })(jQuery, window)