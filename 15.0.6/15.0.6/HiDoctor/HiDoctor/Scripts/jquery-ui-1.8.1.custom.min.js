jQuery.ui || function (e) { e.ui = { version: "1.8.1", plugin: { add: function (t, n, r) { t = e.ui[t].prototype; for (var i in r) { t.plugins[i] = t.plugins[i] || []; t.plugins[i].push([n, r[i]]) } }, call: function (e, t, n) { if ((t = e.plugins[t]) && e.element[0].parentNode) for (var r = 0; r < t.length; r++) e.options[t[r][0]] && t[r][1].apply(e.element, n) } }, contains: function (e, t) { return document.compareDocumentPosition ? e.compareDocumentPosition(t) & 16 : e !== t && e.contains(t) }, hasScroll: function (t, n) { if (e(t).css("overflow") == "hidden") return false; n = n && n == "left" ? "scrollLeft" : "scrollTop"; var r = false; if (t[n] > 0) return true; t[n] = 1; r = t[n] > 0; t[n] = 0; return r }, isOverAxis: function (e, t, n) { return e > t && e < t + n }, isOver: function (t, n, r, i, s, o) { return e.ui.isOverAxis(t, r, s) && e.ui.isOverAxis(n, i, o) }, keyCode: { ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38 } }; e.fn.extend({ _focus: e.fn.focus, focus: function (t, n) { return typeof t === "number" ? this.each(function () { var r = this; setTimeout(function () { e(r).focus(); n && n.call(r) }, t) }) : this._focus.apply(this, arguments) }, enableSelection: function () { return this.attr("unselectable", "off").css("MozUserSelect", "") }, disableSelection: function () { return this.attr("unselectable", "on").css("MozUserSelect", "none") }, scrollParent: function () { var t; t = e.browser.msie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function () { return /(relative|absolute|fixed)/.test(e.curCSS(this, "position", 1)) && /(auto|scroll)/.test(e.curCSS(this, "overflow", 1) + e.curCSS(this, "overflow-y", 1) + e.curCSS(this, "overflow-x", 1)) }).eq(0) : this.parents().filter(function () { return /(auto|scroll)/.test(e.curCSS(this, "overflow", 1) + e.curCSS(this, "overflow-y", 1) + e.curCSS(this, "overflow-x", 1)) }).eq(0); return /fixed/.test(this.css("position")) || !t.length ? e(document) : t }, zIndex: function (t) { if (t !== undefined) return this.css("zIndex", t); if (this.length) { t = e(this[0]); for (var n; t.length && t[0] !== document;) { n = t.css("position"); if (n == "absolute" || n == "relative" || n == "fixed") { n = parseInt(t.css("zIndex")); if (!isNaN(n) && n != 0) return n } t = t.parent() } } return 0 } }); e.extend(e.expr[":"], { data: function (t, n, r) { return !!e.data(t, r[3]) }, focusable: function (t) { var n = t.nodeName.toLowerCase(), r = e.attr(t, "tabindex"); return (/input|select|textarea|button|object/.test(n) ? !t.disabled : "a" == n || "area" == n ? t.href || !isNaN(r) : !isNaN(r)) && !e(t)["area" == n ? "parents" : "closest"](":hidden").length }, tabbable: function (t) { var n = e.attr(t, "tabindex"); return (isNaN(n) || n >= 0) && e(t).is(":focusable") } }) }(jQuery); (function (e) { var t = e.fn.remove; e.fn.remove = function (n, r) { return this.each(function () { if (!r) if (!n || e.filter(n, [this]).length) e("*", this).add(this).each(function () { e(this).triggerHandler("remove") }); return t.call(e(this), n, r) }) }; e.widget = function (t, n, r) { var i = t.split(".")[0], s; t = t.split(".")[1]; s = i + "-" + t; if (!r) { r = n; n = e.Widget } e.expr[":"][s] = function (n) { return !!e.data(n, t) }; e[i] = e[i] || {}; e[i][t] = function (e, t) { arguments.length && this._createWidget(e, t) }; n = new n; n.options = e.extend({}, n.options); e[i][t].prototype = e.extend(true, n, { namespace: i, widgetName: t, widgetEventPrefix: e[i][t].prototype.widgetEventPrefix || t, widgetBaseClass: s }, r); e.widget.bridge(t, e[i][t]) }; e.widget.bridge = function (t, n) { e.fn[t] = function (r) { var i = typeof r === "string", s = Array.prototype.slice.call(arguments, 1), o = this; r = !i && s.length ? e.extend.apply(null, [true, r].concat(s)) : r; if (i && r.substring(0, 1) === "_") return o; i ? this.each(function () { var n = e.data(this, t), i = n && e.isFunction(n[r]) ? n[r].apply(n, s) : n; if (i !== n && i !== undefined) { o = i; return false } }) : this.each(function () { var i = e.data(this, t); if (i) { r && i.option(r); i._init() } else e.data(this, t, new n(r, this)) }); return o } }; e.Widget = function (e, t) { arguments.length && this._createWidget(e, t) }; e.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", options: { disabled: false }, _createWidget: function (t, n) { this.element = e(n).data(this.widgetName, this); this.options = e.extend(true, {}, this.options, e.metadata && e.metadata.get(n)[this.widgetName], t); var r = this; this.element.bind("remove." + this.widgetName, function () { r.destroy() }); this._create(); this._init() }, _create: function () { }, _init: function () { }, destroy: function () { this.element.unbind("." + this.widgetName).removeData(this.widgetName); this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled ui-state-disabled") }, widget: function () { return this.element }, option: function (t, n) { var r = t, i = this; if (arguments.length === 0) return e.extend({}, i.options); if (typeof t === "string") { if (n === undefined) return this.options[t]; r = {}; r[t] = n } e.each(r, function (e, t) { i._setOption(e, t) }); return i }, _setOption: function (e, t) { this.options[e] = t; if (e === "disabled") this.widget()[t ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled ui-state-disabled").attr("aria-disabled", t); return this }, enable: function () { return this._setOption("disabled", false) }, disable: function () { return this._setOption("disabled", true) }, _trigger: function (t, n, r) { var i = this.options[t]; n = e.Event(n); n.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(); r = r || {}; if (n.originalEvent) { t = e.event.props.length; for (var s; t;) { s = e.event.props[--t]; n[s] = n.originalEvent[s] } } this.element.trigger(n, r); return !(e.isFunction(i) && i.call(this.element[0], n, r) === false || n.isDefaultPrevented()) } } })(jQuery); (function (e) { e.ui = e.ui || {}; var t = /left|center|right/, n = /top|center|bottom/, r = e.fn.position, i = e.fn.offset; e.fn.position = function (i) { if (!i || !i.of) return r.apply(this, arguments); i = e.extend({}, i); var s = e(i.of), o = (i.collision || "flip").split(" "), u = i.offset ? i.offset.split(" ") : [0, 0], a, f, l; if (i.of.nodeType === 9) { a = s.width(); f = s.height(); l = { top: 0, left: 0 } } else if (i.of.scrollTo && i.of.document) { a = s.width(); f = s.height(); l = { top: s.scrollTop(), left: s.scrollLeft() } } else if (i.of.preventDefault) { i.at = "left top"; a = f = 0; l = { top: i.of.pageY, left: i.of.pageX } } else { a = s.outerWidth(); f = s.outerHeight(); l = s.offset() } e.each(["my", "at"], function () { var e = (i[this] || "").split(" "); if (e.length === 1) e = t.test(e[0]) ? e.concat(["center"]) : n.test(e[0]) ? ["center"].concat(e) : ["center", "center"]; e[0] = t.test(e[0]) ? e[0] : "center"; e[1] = n.test(e[1]) ? e[1] : "center"; i[this] = e }); if (o.length === 1) o[1] = o[0]; u[0] = parseInt(u[0], 10) || 0; if (u.length === 1) u[1] = u[0]; u[1] = parseInt(u[1], 10) || 0; if (i.at[0] === "right") l.left += a; else if (i.at[0] === "center") l.left += a / 2; if (i.at[1] === "bottom") l.top += f; else if (i.at[1] === "center") l.top += f / 2; l.left += u[0]; l.top += u[1]; return this.each(function () { var t = e(this), n = t.outerWidth(), r = t.outerHeight(), s = e.extend({}, l); if (i.my[0] === "right") s.left -= n; else if (i.my[0] === "center") s.left -= n / 2; if (i.my[1] === "bottom") s.top -= r; else if (i.my[1] === "center") s.top -= r / 2; s.left = parseInt(s.left); s.top = parseInt(s.top); e.each(["left", "top"], function (t, l) { e.ui.position[o[t]] && e.ui.position[o[t]][l](s, { targetWidth: a, targetHeight: f, elemWidth: n, elemHeight: r, offset: u, my: i.my, at: i.at }) }); e.fn.bgiframe && t.bgiframe(); t.offset(e.extend(s, { using: i.using })) }) }; e.ui.position = { fit: { left: function (t, n) { var r = e(window); n = t.left + n.elemWidth - r.width() - r.scrollLeft(); t.left = n > 0 ? t.left - n : Math.max(0, t.left) }, top: function (t, n) { var r = e(window); n = t.top + n.elemHeight - r.height() - r.scrollTop(); t.top = n > 0 ? t.top - n : Math.max(0, t.top) } }, flip: { left: function (t, n) { if (n.at[0] !== "center") { var r = e(window); r = t.left + n.elemWidth - r.width() - r.scrollLeft(); var i = n.my[0] === "left" ? -n.elemWidth : n.my[0] === "right" ? n.elemWidth : 0, s = -2 * n.offset[0]; t.left += t.left < 0 ? i + n.targetWidth + s : r > 0 ? i - n.targetWidth + s : 0 } }, top: function (t, n) { if (n.at[1] !== "center") { var r = e(window); r = t.top + n.elemHeight - r.height() - r.scrollTop(); var i = n.my[1] === "top" ? -n.elemHeight : n.my[1] === "bottom" ? n.elemHeight : 0, s = n.at[1] === "top" ? n.targetHeight : -n.targetHeight, o = -2 * n.offset[1]; t.top += t.top < 0 ? i + n.targetHeight + o : r > 0 ? i + s + o : 0 } } } }; if (!e.offset.setOffset) { e.offset.setOffset = function (t, n) { if (/static/.test(e.curCSS(t, "position"))) t.style.position = "relative"; var r = e(t), i = r.offset(), s = parseInt(e.curCSS(t, "top", true), 10) || 0, o = parseInt(e.curCSS(t, "left", true), 10) || 0; i = { top: n.top - i.top + s, left: n.left - i.left + o }; "using" in n ? n.using.call(t, i) : r.css(i) }; e.fn.offset = function (t) { var n = this[0]; if (!n || !n.ownerDocument) return null; if (t) return this.each(function () { e.offset.setOffset(this, t) }); return i.call(this) } } })(jQuery); (function (e) { e.widget("ui.autocomplete", { options: { minLength: 1, delay: 300 }, _create: function () { var t = this, n = this.element[0].ownerDocument; this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off").attr({ role: "textbox", "aria-autocomplete": "list", "aria-haspopup": "true" }).bind("keydown.autocomplete", function (n) { var r = e.ui.keyCode; switch (n.keyCode) { case r.PAGE_UP: t._move("previousPage", n); break; case r.PAGE_DOWN: t._move("nextPage", n); break; case r.UP: t._move("previous", n); n.preventDefault(); break; case r.DOWN: t._move("next", n); n.preventDefault(); break; case r.ENTER: t.menu.active && n.preventDefault(); case r.TAB: if (!t.menu.active) return; t.menu.select(n); break; case r.ESCAPE: t.element.val(t.term); t.close(n); break; case r.LEFT: case r.RIGHT: case r.SHIFT: case r.CONTROL: case r.ALT: break; default: clearTimeout(t.searching); t.searching = setTimeout(function () { t.search(null, n) }, t.options.delay); break } }).bind("focus.autocomplete", function () { t.selectedItem = null; t.previous = t.element.val() }).bind("blur.autocomplete", function (e) { clearTimeout(t.searching); t.closing = setTimeout(function () { t.close(e); t._change(e) }, 150) }); this._initSource(); this.response = function () { return t._response.apply(t, arguments) }; this.menu = e("<ul></ul>").addClass("ui-autocomplete").appendTo("body", n).menu({ focus: function (e, n) { n = n.item.data("item.autocomplete"); false !== t._trigger("focus", null, { item: n }) && /^key/.test(e.originalEvent.type) && t.element.val(n.value) }, selected: function (e, r) { r = r.item.data("item.autocomplete"); false !== t._trigger("select", e, { item: r }) && t.element.val(r.value); t.close(e); e = t.previous; if (t.element[0] !== n.activeElement) { t.element.focus(); t.previous = e } t.selectedItem = r }, blur: function () { t.menu.element.is(":visible") && t.element.val(t.term) } }).zIndex(this.element.zIndex() + 1).css({ top: 0, left: 0 }).hide().data("menu"); e.fn.bgiframe && this.menu.element.bgiframe() }, destroy: function () { this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup"); this.menu.element.remove(); e.Widget.prototype.destroy.call(this) }, _setOption: function (t) { e.Widget.prototype._setOption.apply(this, arguments); t === "source" && this._initSource() }, _initSource: function () { var t, n; if (e.isArray(this.options.source)) { t = this.options.source; this.source = function (n, r) { r(e.ui.autocomplete.filter(t, n.term)) } } else if (typeof this.options.source === "string") { n = this.options.source; this.source = function (t, r) { e.getJSON(n, t, r) } } else this.source = this.options.source }, search: function (e, t) { e = e != null ? e : this.element.val(); if (e.length < this.options.minLength) return this.close(t); clearTimeout(this.closing); if (this._trigger("search") !== false) return this._search(e) }, _search: function (e) { this.term = this.element.addClass("ui-autocomplete-loading").val(); this.source({ term: e }, this.response) }, _response: function (e) { if (e.length) { e = this._normalize(e); this._suggest(e); this._trigger("open") } else this.close(); this.element.removeClass("ui-autocomplete-loading") }, close: function (e) { clearTimeout(this.closing); if (this.menu.element.is(":visible")) { this._trigger("close", e); this.menu.element.hide(); this.menu.deactivate() } }, _change: function (e) { this.previous !== this.element.val() && this._trigger("change", e, { item: this.selectedItem }) }, _normalize: function (t) { if (t.length && t[0].label && t[0].value) return t; return e.map(t, function (t) { if (typeof t === "string") return { label: t, value: t }; return e.extend({ label: t.label || t.value, value: t.value || t.label }, t) }) }, _suggest: function (e) { var t = this.menu.element.empty().zIndex(this.element.zIndex() + 1), n; this._renderMenu(t, e); this.menu.deactivate(); this.menu.refresh(); this.menu.element.show().position({ my: "left top", at: "left bottom", of: this.element, collision: "none" }); e = t.width("").width(); n = this.element.width(); t.width(Math.max(e, n)) }, _renderMenu: function (t, n) { var r = this; e.each(n, function (e, n) { r._renderItem(t, n) }) }, _renderItem: function (t, n) { return e("<li></li>").data("item.autocomplete", n).append("<a>" + n.label + "</a>").appendTo(t) }, _move: function (e, t) { if (this.menu.element.is(":visible")) if (this.menu.first() && /^previous/.test(e) || this.menu.last() && /^next/.test(e)) { this.element.val(this.term); this.menu.deactivate() } else this.menu[e](t); else this.search(null, t) }, widget: function () { return this.menu.element } }); e.extend(e.ui.autocomplete, { escapeRegex: function (e) { return e.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") }, filter: function (t, n) { var r = new RegExp(e.ui.autocomplete.escapeRegex(n), "i"); return e.grep(t, function (e) { return r.test(e.label || e.value || e) }) } }) })(jQuery); (function (e) { e.widget("ui.menu", { _create: function () { var t = this; this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({ role: "listbox", "aria-activedescendant": "ui-active-menuitem" }).click(function (n) { if (e(n.target).closest(".ui-menu-item a").length) { n.preventDefault(); t.select(n) } }); this.refresh() }, refresh: function () { var t = this; this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "menuitem").children("a").addClass("ui-corner-all").attr("tabindex", -1).mouseenter(function (n) { t.activate(n, e(this).parent()) }).mouseleave(function () { t.deactivate() }) }, activate: function (e, t) { this.deactivate(); if (this.hasScroll()) { var n = t.offset().top - this.element.offset().top, r = this.element.attr("scrollTop"), i = this.element.height(); if (n < 0) this.element.attr("scrollTop", r + n); else n > i && this.element.attr("scrollTop", r + n - i + t.height()) } this.active = t.eq(0).children("a").addClass("ui-state-hover").attr("id", "ui-active-menuitem").end(); this._trigger("focus", e, { item: t }) }, deactivate: function () { if (this.active) { this.active.children("a").removeClass("ui-state-hover").removeAttr("id"); this._trigger("blur"); this.active = null } }, next: function (e) { this.move("next", ".ui-menu-item:first", e) }, previous: function (e) { this.move("prev", ".ui-menu-item:last", e) }, first: function () { return this.active && !this.active.prev().length }, last: function () { return this.active && !this.active.next().length }, move: function (e, t, n) { if (this.active) { e = this.active[e + "All"](".ui-menu-item").eq(0); e.length ? this.activate(n, e) : this.activate(n, this.element.children(t)) } else this.activate(n, this.element.children(t)) }, nextPage: function (t) { if (this.hasScroll()) if (!this.active || this.last()) this.activate(t, this.element.children(":first")); else { var n = this.active.offset().top, r = this.element.height(), i = this.element.children("li").filter(function () { var t = e(this).offset().top - n - r + e(this).height(); return t < 10 && t > -10 }); i.length || (i = this.element.children(":last")); this.activate(t, i) } else this.activate(t, this.element.children(!this.active || this.last() ? ":first" : ":last")) }, previousPage: function (t) { if (this.hasScroll()) if (!this.active || this.first()) this.activate(t, this.element.children(":last")); else { var n = this.active.offset().top, r = this.element.height(); result = this.element.children("li").filter(function () { var t = e(this).offset().top - n + r - e(this).height(); return t < 10 && t > -10 }); result.length || (result = this.element.children(":first")); this.activate(t, result) } else this.activate(t, this.element.children(!this.active || this.first() ? ":last" : ":first")) }, hasScroll: function () { return this.element.height() < this.element.attr("scrollHeight") }, select: function (e) { this._trigger("selected", e, { item: this.active }) } }) })(jQuery);